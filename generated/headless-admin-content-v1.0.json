{
    "openapi": "3.0.1",
    "info": {
        "title": "Headless Admin Content",
        "description": "#### TypeScript SDK Code Sample\n\n```typescript\nimport { createClient } from 'liferay-headless-rest-client';\nimport { getSiteDisplayPageTemplate } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getSiteDisplayPageTemplate({\n        client,\n        path: {\n           siteId: \"5133\",\n           displayPageTemplateKey: \"4346\",\n        },\n    });\n\n    console.log(data);\n}\n```\n#### Java installation:\n\nA Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.content.client', and version '2.0.43'.\n\n```gradle\nimplementation group: \"com.liferay\", name: \"com.liferay.headless.admin.content.client\", version: \"latest\"\n```\n\nReference: https://mvnrepository.com/artifact/com.liferay/com.liferay.headless.admin.content.client/latest",
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "v1.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080"
        }
    ],
    "paths": {
        "/o/headless-admin-content/v1.0/sites/{siteId}/display-page-templates/{displayPageTemplateKey}": {
            "get": {
                "tags": [
                    "DisplayPageTemplate"
                ],
                "description": "Retrieves a display page template of a site",
                "operationId": "getSiteDisplayPageTemplate",
                "parameters": [
                    {
                        "name": "siteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayPageTemplateKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayPageTemplate"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayPageTemplate"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getSiteDisplayPageTemplate } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getSiteDisplayPageTemplate({\n        client,\n        path: {\n           siteId: \"8300\",\n           displayPageTemplateKey: \"4323\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/sites/{siteId}/display-page-templates/{displayPageTemplateKey}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/headless-admin-content/v1.0/sites/{siteId}/display-page-templates": {
            "get": {
                "tags": [
                    "DisplayPageTemplate"
                ],
                "description": "Retrieves the display page templates of a site",
                "operationId": "getSiteDisplayPageTemplatesPage",
                "parameters": [
                    {
                        "name": "siteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDisplayPageTemplate"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageDisplayPageTemplate"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getSiteDisplayPageTemplatesPage } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getSiteDisplayPageTemplatesPage({\n        client,\n        path: {\n           siteId: \"4938\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/sites/{siteId}/display-page-templates', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/headless-admin-content/v1.0/sites/{siteId}/page-definitions/preview": {
            "post": {
                "tags": [
                    "PageDefinition"
                ],
                "description": "Renders and retrieves HTML for the page definition using the theme of specified site.",
                "operationId": "postSitePageDefinitionPreview",
                "parameters": [
                    {
                        "name": "siteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageDefinition"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/PageDefinition"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "text/html": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postSitePageDefinitionPreview } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postSitePageDefinitionPreview({\n        client,\n        path: {\n           siteId: \"7001\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/sites/{siteId}/page-definitions/preview', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/headless-admin-content/v1.0/structured-contents/{structuredContentId}/by-version/{version}": {
            "get": {
                "tags": [
                    "StructuredContent"
                ],
                "description": "Retrieves a version of a structured content",
                "operationId": "getStructuredContentByVersion",
                "parameters": [
                    {
                        "name": "structuredContentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StructuredContent"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/StructuredContent"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getStructuredContentByVersion } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getStructuredContentByVersion({\n        client,\n        path: {\n           structuredContentId: \"6925\",\n           version: \"1128\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/structured-contents/{structuredContentId}/by-version/{version}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "StructuredContent"
                ],
                "description": "Deletes a version of a structured content via its ID.",
                "operationId": "deleteStructuredContentByVersion",
                "parameters": [
                    {
                        "name": "structuredContentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteStructuredContentByVersion } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteStructuredContentByVersion({\n        client,\n        path: {\n           structuredContentId: \"6652\",\n           version: \"978\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/structured-contents/{structuredContentId}/by-version/{version}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/headless-admin-content/v1.0/sites/{siteId}/structured-contents": {
            "get": {
                "tags": [
                    "StructuredContent"
                ],
                "description": "Retrieves the site's structured contents latest version. Results can be paginated, filtered, searched, flattened, and sorted.",
                "operationId": "getSiteStructuredContentsPage",
                "parameters": [
                    {
                        "name": "siteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "aggregationTerms",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "flatten",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageStructuredContent"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageStructuredContent"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getSiteStructuredContentsPage } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getSiteStructuredContentsPage({\n        client,\n        path: {\n           siteId: \"9409\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/sites/{siteId}/structured-contents', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/headless-admin-content/v1.0/structured-contents/{structuredContentId}/versions": {
            "get": {
                "tags": [
                    "StructuredContent"
                ],
                "description": "Retrieves all versions of a structured content via its ID.",
                "operationId": "getStructuredContentsVersionsPage",
                "parameters": [
                    {
                        "name": "structuredContentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageStructuredContent"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageStructuredContent"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getStructuredContentsVersionsPage } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getStructuredContentsVersionsPage({\n        client,\n        path: {\n           structuredContentId: \"6043\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/structured-contents/{structuredContentId}/versions', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/headless-admin-content/v1.0/sites/{siteId}/structured-contents/draft": {
            "post": {
                "tags": [
                    "StructuredContent"
                ],
                "description": "Creates a draft of a structured content",
                "operationId": "postSiteStructuredContentDraft",
                "parameters": [
                    {
                        "name": "siteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StructuredContent"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/StructuredContent"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StructuredContent"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/StructuredContent"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postSiteStructuredContentDraft } from 'liferay-headless-rest-client/headless-admin-content-v1.0';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postSiteStructuredContentDraft({\n        client,\n        path: {\n           siteId: \"3904\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/headless-admin-content/v1.0/sites/{siteId}/structured-contents/draft', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ClientExtension": {
                "type": "object",
                "properties": {
                    "clientExtensionConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The client extension's external reference code."
                    },
                    "name": {
                        "type": "string",
                        "description": "The client extension's name.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.ClientExtension"
                    }
                },
                "description": "The Client Extension for the theme spritemap of a page",
                "xml": {
                    "name": "ClientExtension"
                },
                "x-filterable": []
            },
            "ContentAssociation": {
                "type": "object",
                "properties": {
                    "contentSubtype": {
                        "type": "string",
                        "description": "The subtype of the content. i.e. the Structure name if it's a Structured Content."
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of the content, i.e. Structure Content, BlogsPosting, etc."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.admin.content.dto.v1_0.ContentAssociation"
                    }
                },
                "xml": {
                    "name": "ContentAssociation"
                },
                "x-filterable": []
            },
            "Creator": {
                "type": "object",
                "properties": {
                    "additionalName": {
                        "type": "string",
                        "description": "The author's additional name (e.g., middle name).",
                        "readOnly": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of the content.",
                        "readOnly": true
                    },
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The external reference code of the author.",
                        "readOnly": true
                    },
                    "familyName": {
                        "type": "string",
                        "description": "The author's surname.",
                        "readOnly": true
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The author's first name.",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "The author's ID.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "image": {
                        "type": "string",
                        "description": "A relative URL to the author's profile image.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The author's full name.",
                        "readOnly": true
                    },
                    "profileURL": {
                        "type": "string",
                        "description": "A relative URL to the author's user profile. Optional field, can be embedded with nestedFields.",
                        "readOnly": true
                    },
                    "userGroupBriefs": {
                        "type": "array",
                        "description": "A list of userGroups information.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupBrief"
                        }
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.Creator"
                    }
                },
                "description": "The structured content's creator.",
                "xml": {
                    "name": "Creator"
                },
                "x-filterable": []
            },
            "CustomField": {
                "type": "object",
                "properties": {
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.portal.vulcan.custom.field.CustomField"
                    },
                    "customValue": {
                        "$ref": "#/components/schemas/CustomValue"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The field type (e.g., image, text, etc.).",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The field's internal name. This is valid for comparisons and unique in the structured content."
                    }
                },
                "description": "A list of the custom fields associated with the structured content.",
                "xml": {
                    "name": "CustomField"
                },
                "x-filterable": []
            },
            "CustomValue": {
                "type": "object",
                "properties": {
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.portal.vulcan.custom.field.CustomValue"
                    },
                    "data": {
                        "type": "object",
                        "description": "The field's content value for simple types."
                    },
                    "data_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized field's content values for simple types."
                        },
                        "description": "The localized field's content values for simple types."
                    },
                    "geo": {
                        "$ref": "#/components/schemas/Geo"
                    }
                },
                "description": "The field's value.",
                "xml": {
                    "name": "CustomValue"
                },
                "x-filterable": []
            },
            "DisplayPageTemplate": {
                "required": [
                    "title"
                ],
                "type": "object",
                "properties": {
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "readOnly": true
                    },
                    "availableLanguages": {
                        "type": "array",
                        "description": "The list of languages the Display Page Template has a translation for.",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The list of languages the Display Page Template has a translation for."
                        }
                    },
                    "creator": {
                        "$ref": "#/components/schemas/Creator"
                    },
                    "customFields": {
                        "type": "array",
                        "description": "The custom fields associated to the page that renders the Display Page Template.",
                        "items": {
                            "$ref": "#/components/schemas/CustomField"
                        }
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The Display Page Template's creation date.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The last time any field of the Display Page Template was changed.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "displayPageTemplateKey": {
                        "type": "string",
                        "description": "The Display Page Template's external key."
                    },
                    "displayPageTemplateSettings": {
                        "$ref": "#/components/schemas/DisplayPageTemplateSettings"
                    },
                    "markedAsDefault": {
                        "type": "boolean",
                        "description": "Specifies if the Display Page Template is the default one for the content type."
                    },
                    "pageDefinition": {
                        "$ref": "#/components/schemas/PageDefinition"
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "The ID of the site to which this Page Template is scoped.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the Display Page Template"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "A valid external identifier to reference this Display Page Template.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.admin.content.dto.v1_0.DisplayPageTemplate"
                    }
                },
                "description": "Represents a Display Page Template that has fields and is tied to a content type",
                "xml": {
                    "name": "DisplayPageTemplate"
                },
                "x-filterable": []
            },
            "DisplayPageTemplateSettings": {
                "type": "object",
                "properties": {
                    "contentAssociation": {
                        "$ref": "#/components/schemas/ContentAssociation"
                    },
                    "openGraphSettingsMapping": {
                        "$ref": "#/components/schemas/OpenGraphSettingsMapping"
                    },
                    "seoSettingsMapping": {
                        "$ref": "#/components/schemas/SEOSettingsMapping"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.admin.content.dto.v1_0.DisplayPageTemplateSettings"
                    }
                },
                "description": "The Display Page Template's external key.",
                "xml": {
                    "name": "DisplayPageTemplateSettings"
                },
                "x-filterable": []
            },
            "Geo": {
                "type": "object",
                "properties": {
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.portal.vulcan.custom.field.Geo"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "The latitude of a point in space.",
                        "format": "double"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "The longitude of a point in space.",
                        "format": "double"
                    }
                },
                "description": "A point determined by latitude and longitude.",
                "xml": {
                    "name": "Geo"
                },
                "x-filterable": []
            },
            "MasterPage": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The master page's key."
                    },
                    "name": {
                        "type": "string",
                        "description": "The master page's name."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.MasterPage"
                    }
                },
                "description": "The page's master page.",
                "xml": {
                    "name": "MasterPage"
                },
                "x-filterable": []
            },
            "OpenGraphSettingsMapping": {
                "type": "object",
                "properties": {
                    "descriptionMappingFieldKey": {
                        "type": "string",
                        "description": "Field of the content type that will be used as the description"
                    },
                    "imageAltMappingFieldKey": {
                        "type": "string",
                        "description": "Field of the content type that will be used as the alt property of the image"
                    },
                    "imageMappingFieldKey": {
                        "type": "string",
                        "description": "Field of the content type that will be used as the image"
                    },
                    "titleMappingFieldKey": {
                        "type": "string",
                        "description": "Field of the content type that will be used as the title"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.admin.content.dto.v1_0.OpenGraphSettingsMapping"
                    }
                },
                "xml": {
                    "name": "OpenGraphSettingsMapping"
                },
                "x-filterable": []
            },
            "Options": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The page rule condition's value."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.Options"
                    },
                    "type": {
                        "type": "string",
                        "description": "The page rule condition option's type.",
                        "enum": [
                            "Equal",
                            "NotEqual"
                        ]
                    }
                },
                "xml": {
                    "name": "Options"
                },
                "x-filterable": []
            },
            "PageDefinition": {
                "type": "object",
                "properties": {
                    "pageElement": {
                        "$ref": "#/components/schemas/PageElement"
                    },
                    "pageRules": {
                        "type": "array",
                        "description": "A list of the page rules this page has.",
                        "items": {
                            "$ref": "#/components/schemas/PageRule"
                        }
                    },
                    "settings": {
                        "$ref": "#/components/schemas/Settings"
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the JSON generated by page definition.",
                        "format": "double"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.PageDefinition"
                    }
                },
                "xml": {
                    "name": "PageDefinition"
                },
                "x-filterable": []
            },
            "PageElement": {
                "type": "object",
                "properties": {
                    "definition": {
                        "type": "object",
                        "description": "The page element's definition."
                    },
                    "id": {
                        "type": "string",
                        "description": "The page element's ID."
                    },
                    "pageElements": {
                        "type": "array",
                        "description": "A list of the page elements this page element has.",
                        "items": {
                            "$ref": "#/components/schemas/PageElement"
                        }
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.PageElement"
                    },
                    "type": {
                        "type": "string",
                        "description": "The page element's type (collection, collection item, column, drop zone, form, fragment, fragment drop zone, root, row, section or widget).",
                        "enum": [
                            "Collection",
                            "CollectionItem",
                            "Column",
                            "DropZone",
                            "Form",
                            "FormStep",
                            "FormStepContainer",
                            "Fragment",
                            "FragmentDropZone",
                            "Root",
                            "Row",
                            "Section",
                            "Widget"
                        ]
                    }
                },
                "description": "The page's page element.",
                "xml": {
                    "name": "PageElement"
                },
                "x-filterable": []
            },
            "PageRule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The page rule ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "The custom name of a Page rule."
                    },
                    "pageRuleActions": {
                        "type": "array",
                        "description": "A list of actions of a Page rule.",
                        "items": {
                            "$ref": "#/components/schemas/PageRuleAction"
                        }
                    },
                    "pageRuleConditions": {
                        "type": "array",
                        "description": "A list of conditions of a Page rule.",
                        "items": {
                            "$ref": "#/components/schemas/PageRuleCondition"
                        }
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.PageRule"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "The custom name of a Page rule.",
                        "enum": [
                            "All",
                            "Any"
                        ]
                    }
                },
                "description": "A list of the page rules this page has.",
                "xml": {
                    "name": "PageRule"
                },
                "x-filterable": []
            },
            "PageRuleAction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The page rule action's ID."
                    },
                    "itemId": {
                        "type": "string",
                        "description": "The page rule condition's item ID."
                    },
                    "type": {
                        "type": "string",
                        "description": "The page rule action's type."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.PageRuleAction"
                    }
                },
                "description": "A list of actions of a Page rule.",
                "xml": {
                    "name": "PageRuleAction"
                },
                "x-filterable": []
            },
            "PageRuleCondition": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "The page rule condition's field."
                    },
                    "id": {
                        "type": "string",
                        "description": "The page rule condition's ID."
                    },
                    "options": {
                        "$ref": "#/components/schemas/Options"
                    },
                    "type": {
                        "type": "string",
                        "description": "The page rule condition's type."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.PageRuleCondition"
                    }
                },
                "description": "A list of conditions of a Page rule.",
                "xml": {
                    "name": "PageRuleCondition"
                },
                "x-filterable": []
            },
            "SEOSettingsMapping": {
                "type": "object",
                "properties": {
                    "descriptionMappingFieldKey": {
                        "type": "string",
                        "description": "Field of the content type that will be used as the description"
                    },
                    "htmlTitleMappingFieldKey": {
                        "type": "string",
                        "description": "Field of the content type that will be used as the HTML title"
                    },
                    "robots": {
                        "type": "string",
                        "description": "Robots of the page that renders the Display Page Template"
                    },
                    "robots_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Internationalized field of the robots of the page that renders the Display Page Template"
                        },
                        "description": "Internationalized field of the robots of the page that renders the Display Page Template"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.admin.content.dto.v1_0.SEOSettingsMapping"
                    }
                },
                "xml": {
                    "name": "SEOSettingsMapping"
                },
                "x-filterable": []
            },
            "Settings": {
                "type": "object",
                "properties": {
                    "colorSchemeName": {
                        "type": "string",
                        "description": "The page's color scheme name."
                    },
                    "css": {
                        "type": "string",
                        "description": "The page's CSS."
                    },
                    "favIcon": {
                        "type": "object",
                        "description": "The FavIcon of the page"
                    },
                    "globalCSSClientExtensions": {
                        "type": "array",
                        "description": "The client extensions for global css associated to the page.",
                        "items": {
                            "$ref": "#/components/schemas/ClientExtension"
                        }
                    },
                    "globalJSClientExtensions": {
                        "type": "array",
                        "description": "The client extensions for global js associated to the page.",
                        "items": {
                            "$ref": "#/components/schemas/ClientExtension"
                        }
                    },
                    "javascript": {
                        "type": "string",
                        "description": "The page's JavaScript."
                    },
                    "masterPage": {
                        "$ref": "#/components/schemas/MasterPage"
                    },
                    "styleBook": {
                        "$ref": "#/components/schemas/StyleBook"
                    },
                    "themeCSSClientExtension": {
                        "$ref": "#/components/schemas/ClientExtension"
                    },
                    "themeName": {
                        "type": "string",
                        "description": "The page's theme name."
                    },
                    "themeSettings": {
                        "type": "object",
                        "description": "The page's theme settings."
                    },
                    "themeSpritemapClientExtension": {
                        "$ref": "#/components/schemas/ClientExtension"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.Settings"
                    }
                },
                "description": "The page's settings.",
                "xml": {
                    "name": "Settings"
                },
                "x-filterable": []
            },
            "StyleBook": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The stylebook's key."
                    },
                    "name": {
                        "type": "string",
                        "description": "The stylebook's name."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.StyleBook"
                    }
                },
                "description": "The StyleBook that is applied to the page.",
                "xml": {
                    "name": "StyleBook"
                },
                "x-filterable": []
            },
            "UserGroupBrief": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the user group.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.UserGroupBrief"
                    }
                },
                "description": "A list of userGroups information.",
                "xml": {
                    "name": "UserGroupBrief"
                },
                "x-filterable": []
            },
            "Facet": {
                "type": "object",
                "properties": {
                    "facetCriteria": {
                        "type": "string"
                    },
                    "facetValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FacetValue"
                        }
                    }
                },
                "x-filterable": []
            },
            "FacetValue": {
                "type": "object",
                "properties": {
                    "numberOfOccurrences": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "term": {
                        "type": "string"
                    }
                },
                "x-filterable": []
            },
            "PageDisplayPageTemplate": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DisplayPageTemplate"
                        }
                    },
                    "lastPage": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "facets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Facet"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "x-filterable": []
            },
            "AggregateRating": {
                "type": "object",
                "properties": {
                    "bestRating": {
                        "type": "number",
                        "description": "The highest possible rating (by default normalized to 1.0).",
                        "format": "double",
                        "readOnly": true
                    },
                    "ratingAverage": {
                        "type": "number",
                        "description": "The average rating.",
                        "format": "double",
                        "readOnly": true
                    },
                    "ratingCount": {
                        "type": "integer",
                        "description": "The number of ratings.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "ratingValue": {
                        "type": "number",
                        "description": "The rating value.",
                        "format": "double",
                        "readOnly": true
                    },
                    "worstRating": {
                        "type": "number",
                        "description": "The lowest possible rating (by default normalized to 0.0).",
                        "format": "double",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.AggregateRating"
                    }
                },
                "description": "The structured content's average rating.",
                "xml": {
                    "name": "AggregateRating"
                },
                "x-filterable": []
            },
            "ContentDocument": {
                "type": "object",
                "properties": {
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "description": "Block of actions allowed by the user making the request."
                            },
                            "description": "Block of actions allowed by the user making the request."
                        },
                        "description": "Block of actions allowed by the user making the request.",
                        "readOnly": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of content.",
                        "readOnly": true
                    },
                    "contentUrl": {
                        "type": "string",
                        "description": "The document's relative URL.",
                        "readOnly": true
                    },
                    "contentValue": {
                        "type": "string",
                        "description": "optional field with the content of the document in Base64, can be embedded with nestedFields",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The document's description."
                    },
                    "encodingFormat": {
                        "type": "string",
                        "description": "The document's content type (e.g., `application/pdf`, etc.).",
                        "readOnly": true
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "The document's file extension.",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "The document's ID.",
                        "format": "int64"
                    },
                    "sizeInBytes": {
                        "type": "integer",
                        "description": "The document's file size in bytes.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "description": "The document's title."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.ContentDocument"
                    }
                },
                "description": "A content document element that stores an image file.",
                "xml": {
                    "name": "ContentDocument"
                },
                "x-filterable": []
            },
            "ContentField": {
                "type": "object",
                "properties": {
                    "contentFieldValue": {
                        "$ref": "#/components/schemas/ContentFieldValue"
                    },
                    "contentFieldValue_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ContentFieldValue"
                        },
                        "description": "The localized field's values."
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The field type (e.g., image, text, etc.).",
                        "readOnly": true
                    },
                    "inputControl": {
                        "type": "string",
                        "description": "The field's control type (e.g., text, text area, etc.).",
                        "readOnly": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The field's label.",
                        "readOnly": true
                    },
                    "label_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized field's labels."
                        },
                        "description": "The localized field's labels.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The field's internal name. This is valid for comparisons and unique in the structured content."
                    },
                    "nestedContentFields": {
                        "type": "array",
                        "description": "A list of child content fields that depend on this resource.",
                        "items": {
                            "$ref": "#/components/schemas/ContentField"
                        }
                    },
                    "repeatable": {
                        "type": "boolean",
                        "description": "A flag that indicates whether this field can be rendered multiple times.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.ContentField"
                    }
                },
                "description": "The list of fields that store the structured content's information.",
                "xml": {
                    "name": "ContentField"
                },
                "x-filterable": []
            },
            "ContentFieldValue": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The field's content for simple types."
                    },
                    "document": {
                        "$ref": "#/components/schemas/ContentDocument"
                    },
                    "geo": {
                        "$ref": "#/components/schemas/Geo"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ContentDocument"
                    },
                    "link": {
                        "type": "string",
                        "description": "A link to a page on the server."
                    },
                    "structuredContentLink": {
                        "$ref": "#/components/schemas/StructuredContentLink"
                    },
                    "value": {
                        "type": "string",
                        "description": "The field's visible value"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.ContentFieldValue"
                    }
                },
                "description": "The localized field's values.",
                "xml": {
                    "name": "ContentFieldValue"
                },
                "x-filterable": []
            },
            "PageStructuredContent": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StructuredContent"
                        }
                    },
                    "lastPage": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "facets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Facet"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "x-filterable": []
            },
            "Permission": {
                "type": "object",
                "properties": {
                    "actionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleExternalReferenceCode": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    },
                    "roleType": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Permission"
                },
                "x-filterable": []
            },
            "RelatedContent": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "The type of the content."
                    },
                    "id": {
                        "type": "integer",
                        "description": "The identifier of the resource.",
                        "format": "int64"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the content.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.RelatedContent"
                    }
                },
                "description": "A list of related contents to this structured content.",
                "xml": {
                    "name": "RelatedContent"
                },
                "x-filterable": []
            },
            "RenderedContent": {
                "type": "object",
                "properties": {
                    "contentTemplateId": {
                        "type": "string",
                        "description": "The ID of the template or display page used to render the content.",
                        "readOnly": true
                    },
                    "contentTemplateName": {
                        "type": "string",
                        "description": "The name of the template or display page used to render the content."
                    },
                    "contentTemplateName_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized names of the template or display page used to render the content."
                        },
                        "description": "The localized names of the template or display page used to render the content."
                    },
                    "markedAsDefault": {
                        "type": "boolean",
                        "description": "Specifies if the template or display page are marked as default to display the content."
                    },
                    "renderedContentURL": {
                        "type": "string",
                        "description": "An absolute URL to the rendered content."
                    },
                    "renderedContentValue": {
                        "type": "string",
                        "description": "Optional field with the rendered content, can be embedded with nestedFields."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.RenderedContent"
                    }
                },
                "description": "A list of rendered content, which results from using a template to process the content and return HTML.",
                "xml": {
                    "name": "RenderedContent"
                },
                "x-filterable": []
            },
            "StructuredContent": {
                "required": [
                    "contentStructureId",
                    "title"
                ],
                "type": "object",
                "properties": {
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "description": "Block of actions allowed by the user making the request."
                            },
                            "description": "Block of actions allowed by the user making the request."
                        },
                        "description": "Block of actions allowed by the user making the request.",
                        "readOnly": true
                    },
                    "aggregateRating": {
                        "$ref": "#/components/schemas/AggregateRating"
                    },
                    "assetLibraryKey": {
                        "type": "string",
                        "description": "The key of the asset library to which the structure content is scoped.",
                        "readOnly": true
                    },
                    "availableLanguages": {
                        "type": "array",
                        "description": "The list of languages the structured content has a translation for.",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The list of languages the structured content has a translation for."
                        }
                    },
                    "contentFields": {
                        "type": "array",
                        "description": "The list of fields that store the structured content's information.",
                        "items": {
                            "$ref": "#/components/schemas/ContentField"
                        }
                    },
                    "contentStructureId": {
                        "type": "integer",
                        "description": "The ID of the `ContentStructure`.",
                        "format": "int64"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/Creator"
                    },
                    "customFields": {
                        "type": "array",
                        "description": "A list of the custom fields associated with the structured content.",
                        "items": {
                            "$ref": "#/components/schemas/CustomField"
                        }
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The structured content's creation date.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "dateExpired": {
                        "type": "string",
                        "description": "The expiration date of the structured content.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The last time any field of the structured content was changed.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "datePublished": {
                        "type": "string",
                        "description": "The structured content's most recent publication date.",
                        "format": "date-time"
                    },
                    "description": {
                        "type": "string",
                        "description": "The structured content's description."
                    },
                    "description_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized structured content's descriptions."
                        },
                        "description": "The localized structured content's descriptions."
                    },
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The structured content's external reference code."
                    },
                    "friendlyUrlPath": {
                        "type": "string",
                        "description": "A relative URL to the structured content's rendered content."
                    },
                    "friendlyUrlPath_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized relative URLs to the structured content's rendered content."
                        },
                        "description": "The localized relative URLs to the structured content's rendered content."
                    },
                    "id": {
                        "type": "integer",
                        "description": "The structured content's ID.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "key": {
                        "type": "string",
                        "description": "An identifier, independent of the database, that can be used to reference the structured content.",
                        "readOnly": true
                    },
                    "keywords": {
                        "type": "array",
                        "description": "A list of keywords describing the structured content.",
                        "items": {
                            "type": "string",
                            "description": "A list of keywords describing the structured content."
                        }
                    },
                    "neverExpire": {
                        "type": "boolean",
                        "description": "Whether the web content article is not set to auto expire"
                    },
                    "numberOfComments": {
                        "type": "integer",
                        "description": "The number of comments the structured content has received.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "permissions": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    },
                    "priority": {
                        "type": "number",
                        "description": "The structured content's priority.",
                        "format": "double"
                    },
                    "relatedContents": {
                        "type": "array",
                        "description": "A list of related contents to this structured content.",
                        "items": {
                            "$ref": "#/components/schemas/RelatedContent"
                        }
                    },
                    "renderedContents": {
                        "type": "array",
                        "description": "A list of rendered content, which results from using a template to process the content and return HTML.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/RenderedContent"
                        }
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "The ID of the site to which this structured content is scoped.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "structuredContentFolderId": {
                        "type": "integer",
                        "description": "The ID of the folder where structured content is stored.",
                        "format": "int64"
                    },
                    "subscribed": {
                        "type": "boolean",
                        "description": "A flag that indicates whether the user making the requests is subscribed to this structured content.",
                        "readOnly": true
                    },
                    "taxonomyCategoryBriefs": {
                        "type": "array",
                        "description": "The categories associated with this structured content.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyCategoryBrief"
                        }
                    },
                    "taxonomyCategoryIds": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "title": {
                        "type": "string",
                        "description": "The structured content's main title."
                    },
                    "title_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized structured content's main titles."
                        },
                        "description": "The localized structured content's main titles."
                    },
                    "uuid": {
                        "type": "string",
                        "description": "A valid external identifier to reference this structured content.",
                        "readOnly": true
                    },
                    "viewableBy": {
                        "type": "string",
                        "writeOnly": true,
                        "enum": [
                            "Anyone",
                            "Members",
                            "Owner"
                        ]
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.StructuredContent"
                    }
                },
                "description": "Represents content that has fields and is rendered by a template backed by a `ContentStructure`. This is modeled internally as a `JournalArticle`.",
                "xml": {
                    "name": "StructuredContent"
                },
                "x-filterable": [
                    "contentStructureId",
                    "creatorId",
                    "dateCreated",
                    "dateModified",
                    "datePublished",
                    "friendlyUrlPath",
                    "id",
                    "keywords",
                    "priority",
                    "taxonomyCategoryIds",
                    "title"
                ]
            },
            "StructuredContentLink": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "The type of content.",
                        "readOnly": true
                    },
                    "embeddedStructuredContent": {
                        "$ref": "#/components/schemas/StructuredContent"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The resource's ID.",
                        "format": "int64"
                    },
                    "title": {
                        "type": "string",
                        "description": "The resource's title."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.StructuredContentLink"
                    }
                },
                "description": "A link to structured content on the server.",
                "xml": {
                    "name": "StructuredContentLink"
                },
                "x-filterable": []
            },
            "TaxonomyCategoryBrief": {
                "type": "object",
                "properties": {
                    "embeddedTaxonomyCategory": {
                        "type": "object",
                        "description": "Optional field with the embedded taxonomy category, can be embedded with nestedFields",
                        "readOnly": true
                    },
                    "taxonomyCategoryId": {
                        "type": "integer",
                        "description": "The category's ID. This can be used to retrieve more information in the `TaxonomyCategory` API.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "taxonomyCategoryName": {
                        "type": "string",
                        "description": "The category's name.",
                        "readOnly": true
                    },
                    "taxonomyCategoryName_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized category's names."
                        },
                        "description": "The localized category's names.",
                        "readOnly": true
                    },
                    "taxonomyCategoryReference": {
                        "$ref": "#/components/schemas/TaxonomyCategoryReference"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.TaxonomyCategoryBrief"
                    }
                },
                "description": "The categories associated with this structured content.",
                "xml": {
                    "name": "TaxonomyCategoryBrief"
                },
                "x-filterable": []
            },
            "TaxonomyCategoryReference": {
                "required": [
                    "externalReferenceCode"
                ],
                "type": "object",
                "properties": {
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The taxonomy category's external reference code."
                    },
                    "siteKey": {
                        "type": "string",
                        "description": "The key of the site or asset library where the taxonomy category is located. It can be left out if the taxonomy category is in the same site as the page."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.TaxonomyCategoryReference"
                    }
                },
                "description": "A unique reference to a taxonomy category.",
                "xml": {
                    "name": "TaxonomyCategoryReference"
                },
                "x-filterable": []
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "description": "JWT Bearer token authentication"
            },
            "basicAuth": {
                "type": "http",
                "scheme": "basic",
                "description": "Basic HTTP authentication"
            },
            "apiKeyHeader": {
                "type": "apiKey",
                "in": "header",
                "name": "X-API-Key",
                "description": "API key request header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "in": "query",
                "name": "api_key",
                "description": "API key query parameter"
            },
            "apiKeyCookie": {
                "type": "apiKey",
                "in": "cookie",
                "name": "api_key",
                "description": "API key browser cookie"
            },
            "oAuth2": {
                "type": "oauth2",
                "description": "OAuth 2.0 authentication",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://galaxy.scalar.com/oauth/authorize",
                        "tokenUrl": "https://galaxy.scalar.com/oauth/token",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    },
                    "clientCredentials": {
                        "tokenUrl": "https://galaxy.scalar.com/oauth/token",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    },
                    "implicit": {
                        "authorizationUrl": "https://galaxy.scalar.com/oauth/authorize",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    },
                    "password": {
                        "tokenUrl": "https://galaxy.scalar.com/oauth/token",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    }
                }
            },
            "openIdConnect": {
                "type": "openIdConnect",
                "openIdConnectUrl": "https://galaxy.scalar.com/.well-known/openid-configuration",
                "description": "OpenID Connect Authentication"
            }
        }
    }
}
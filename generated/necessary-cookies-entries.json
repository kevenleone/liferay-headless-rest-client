{
    "openapi": "3.0.1",
    "info": {
        "title": "Object",
        "version": "v1.0",
        "description": "..."
    },
    "servers": [
        {
            "url": "http://localhost:8080"
        }
    ],
    "paths": {
        "/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators/by-type/{type}/{collaboratorId}": {
            "get": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Retrieves the collaborator for an object entry.",
                "operationId": "getScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator",
                "parameters": [
                    {
                        "name": "scopeKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collaboratorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator({\n        client,\n        path: {\n           scopeKey: \"4293\",\n           externalReferenceCode: \"9461\",\n           type: \"1255\",\n           collaboratorId: \"5648\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators/by-type/{type}/{collaboratorId}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Add or update a collaborator received in the request.",
                "operationId": "putScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator",
                "parameters": [
                    {
                        "name": "scopeKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collaboratorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Collaborator"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Collaborator"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator({\n        client,\n        path: {\n           scopeKey: \"8470\",\n           externalReferenceCode: \"3508\",\n           type: \"7218\",\n           collaboratorId: \"6085\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators/by-type/{type}/{collaboratorId}', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Deletes the collaborator for an object entry and returns a 204 if the operation succeeds.",
                "operationId": "deleteScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator",
                "parameters": [
                    {
                        "name": "scopeKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collaboratorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteScopeScopeKeyByExternalReferenceCodeCollaboratorByTypeCollaborator({\n        client,\n        path: {\n           scopeKey: \"1820\",\n           externalReferenceCode: \"5516\",\n           type: \"8323\",\n           collaboratorId: \"546\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators/by-type/{type}/{collaboratorId}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators": {
            "get": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Retrieves the collaborators of an object entry.",
                "operationId": "getScopeScopeKeyByExternalReferenceCodeCollaboratorsPage",
                "parameters": [
                    {
                        "name": "scopeKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getScopeScopeKeyByExternalReferenceCodeCollaboratorsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getScopeScopeKeyByExternalReferenceCodeCollaboratorsPage({\n        client,\n        path: {\n           scopeKey: \"9467\",\n           externalReferenceCode: \"8546\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Add or update all the collaborators received in the request. Delete existing collaborators that are not included in the request. Send a notification for the new collaborators and those whose permissions are different.",
                "operationId": "postScopeScopeKeyByExternalReferenceCodeCollaboratorsPage",
                "parameters": [
                    {
                        "name": "scopeKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postScopeScopeKeyByExternalReferenceCodeCollaboratorsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postScopeScopeKeyByExternalReferenceCodeCollaboratorsPage({\n        client,\n        path: {\n           scopeKey: \"3473\",\n           externalReferenceCode: \"3821\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/scopes/{scopeKey}/by-external-reference-code/{externalReferenceCode}/collaborators', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getByExternalReferenceCode",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getByExternalReferenceCode } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getByExternalReferenceCode({\n        client,\n        path: {\n           externalReferenceCode: \"381\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "put": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "putByExternalReferenceCode",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putByExternalReferenceCode } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putByExternalReferenceCode({\n        client,\n        path: {\n           externalReferenceCode: \"127\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "deleteByExternalReferenceCode",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteByExternalReferenceCode } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteByExternalReferenceCode({\n        client,\n        path: {\n           externalReferenceCode: \"2780\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "patchByExternalReferenceCode",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { patchByExternalReferenceCode } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await patchByExternalReferenceCode({\n        client,\n        path: {\n           externalReferenceCode: \"9158\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}', {\n  method: 'PATCH',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getByExternalReferenceCodeByVersion",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getByExternalReferenceCodeByVersion } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getByExternalReferenceCodeByVersion({\n        client,\n        path: {\n           externalReferenceCode: \"1036\",\n           version: \"7724\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "deleteByExternalReferenceCodeByVersion",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteByExternalReferenceCodeByVersion } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteByExternalReferenceCodeByVersion({\n        client,\n        path: {\n           externalReferenceCode: \"1160\",\n           version: \"9094\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/batch": {
            "put": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "putNecessaryCookieEntryBatch",
                "parameters": [
                    {
                        "name": "callbackURL",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putNecessaryCookieEntryBatch } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putNecessaryCookieEntryBatch({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/batch', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postNecessaryCookieEntryBatch",
                "parameters": [
                    {
                        "name": "callbackURL",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntryBatch } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntryBatch({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/batch', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "deleteNecessaryCookieEntryBatch",
                "parameters": [
                    {
                        "name": "callbackURL",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteNecessaryCookieEntryBatch } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteNecessaryCookieEntryBatch({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/batch', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/versions": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getByExternalReferenceCodeVersionsPage",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageNecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageNecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getByExternalReferenceCodeVersionsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getByExternalReferenceCodeVersionsPage({\n        client,\n        path: {\n           externalReferenceCode: \"2752\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/versions', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getNecessaryCookieEntriesPage",
                "parameters": [
                    {
                        "name": "aggregationTerms",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "flatten",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageNecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageNecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntriesPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntriesPage({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postNecessaryCookieEntry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntry } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntry({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}/copy": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postByExternalReferenceCodeByVersionCopy",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postByExternalReferenceCodeByVersionCopy } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postByExternalReferenceCodeByVersionCopy({\n        client,\n        path: {\n           externalReferenceCode: \"2798\",\n           version: \"6066\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}/copy', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}/expire": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postByExternalReferenceCodeByVersionExpire",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postByExternalReferenceCodeByVersionExpire } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postByExternalReferenceCodeByVersionExpire({\n        client,\n        path: {\n           externalReferenceCode: \"8488\",\n           version: \"6897\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}/expire', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/export-batch": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postNecessaryCookieEntriesPageExportBatch",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "callbackURL",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contentType",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldNames",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntriesPageExportBatch } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntriesPageExportBatch({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/export-batch', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/validate": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postValidate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationResponse"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postValidate } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postValidate({\n        client,\n        \n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/validate', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}/restore": {
            "put": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "putByExternalReferenceCodeByVersionRestore",
                "parameters": [
                    {
                        "name": "externalReferenceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putByExternalReferenceCodeByVersionRestore } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putByExternalReferenceCodeByVersionRestore({\n        client,\n        path: {\n           externalReferenceCode: \"5247\",\n           version: \"998\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/by-external-reference-code/{externalReferenceCode}/by-version/{version}/restore', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/openapi.{type}": {
            "get": {
                "operationId": "getOpenAPI",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "json|yaml",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/yaml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getOpenAPI } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getOpenAPI({\n        client,\n        path: {\n           type: \"6268\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/openapi.{type}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators/by-type/{type}/{collaboratorId}": {
            "get": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Retrieves the collaborator for an object entry.",
                "operationId": "getNecessaryCookieEntryCollaboratorByTypeCollaborator",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collaboratorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntryCollaboratorByTypeCollaborator } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntryCollaboratorByTypeCollaborator({\n        client,\n        path: {\n           necessaryCookieEntryId: \"9848\",\n           type: \"6570\",\n           collaboratorId: \"236\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators/by-type/{type}/{collaboratorId}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Add or update a collaborator received in the request.",
                "operationId": "putNecessaryCookieEntryCollaboratorByTypeCollaborator",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collaboratorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Collaborator"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Collaborator"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putNecessaryCookieEntryCollaboratorByTypeCollaborator } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putNecessaryCookieEntryCollaboratorByTypeCollaborator({\n        client,\n        path: {\n           necessaryCookieEntryId: \"9936\",\n           type: \"5590\",\n           collaboratorId: \"4203\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators/by-type/{type}/{collaboratorId}', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Deletes the collaborator for an object entry and returns a 204 if the operation succeeds.",
                "operationId": "deleteNecessaryCookieEntryCollaboratorByTypeCollaborator",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "collaboratorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteNecessaryCookieEntryCollaboratorByTypeCollaborator } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteNecessaryCookieEntryCollaboratorByTypeCollaborator({\n        client,\n        path: {\n           necessaryCookieEntryId: \"6731\",\n           type: \"6637\",\n           collaboratorId: \"1729\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators/by-type/{type}/{collaboratorId}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators": {
            "get": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Retrieves the collaborators of an object entry.",
                "operationId": "getNecessaryCookieEntryCollaboratorsPage",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntryCollaboratorsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntryCollaboratorsPage({\n        client,\n        path: {\n           necessaryCookieEntryId: \"4053\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Collaborator"
                ],
                "description": "Add or update all the collaborators received in the request. Delete existing collaborators that are not included in the request.",
                "operationId": "postNecessaryCookieEntryCollaboratorsPage",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Collaborator"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageCollaborator"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntryCollaboratorsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntryCollaboratorsPage({\n        client,\n        path: {\n           necessaryCookieEntryId: \"2671\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators/export-batch": {
            "post": {
                "tags": [
                    "Collaborator"
                ],
                "operationId": "postNecessaryCookieEntryCollaboratorsPageExportBatch",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "callbackURL",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contentType",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fieldNames",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntryCollaboratorsPageExportBatch } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntryCollaboratorsPageExportBatch({\n        client,\n        path: {\n           necessaryCookieEntryId: \"5270\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/collaborators/export-batch', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getNecessaryCookieEntry",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntry } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntry({\n        client,\n        path: {\n           necessaryCookieEntryId: \"7824\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "put": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "putNecessaryCookieEntry",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putNecessaryCookieEntry } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putNecessaryCookieEntry({\n        client,\n        path: {\n           necessaryCookieEntryId: \"2066\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "deleteNecessaryCookieEntry",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteNecessaryCookieEntry } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteNecessaryCookieEntry({\n        client,\n        path: {\n           necessaryCookieEntryId: \"6526\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "patchNecessaryCookieEntry",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NecessaryCookieEntry"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { patchNecessaryCookieEntry } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await patchNecessaryCookieEntry({\n        client,\n        path: {\n           necessaryCookieEntryId: \"6946\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}', {\n  method: 'PATCH',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getNecessaryCookieEntryByVersion",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntryByVersion } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntryByVersion({\n        client,\n        path: {\n           necessaryCookieEntryId: \"7552\",\n           version: \"2834\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "deleteNecessaryCookieEntryByVersion",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { deleteNecessaryCookieEntryByVersion } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await deleteNecessaryCookieEntryByVersion({\n        client,\n        path: {\n           necessaryCookieEntryId: \"6003\",\n           version: \"8002\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}', {\n  method: 'DELETE',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/versions": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getNecessaryCookieEntriesVersionsPage",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageNecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageNecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntriesVersionsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntriesVersionsPage({\n        client,\n        path: {\n           necessaryCookieEntryId: \"4348\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/versions', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/permissions": {
            "get": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "getNecessaryCookieEntryPermissionsPage",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "restrictFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roleNames",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nestedFields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagePermission"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagePermission"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { getNecessaryCookieEntryPermissionsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await getNecessaryCookieEntryPermissionsPage({\n        client,\n        path: {\n           necessaryCookieEntryId: \"3016\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/permissions', {\n  method: 'GET',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            },
            "put": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "putNecessaryCookieEntryPermissionsPage",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Permission"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Permission"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagePermission"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagePermission"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putNecessaryCookieEntryPermissionsPage } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putNecessaryCookieEntryPermissionsPage({\n        client,\n        path: {\n           necessaryCookieEntryId: \"7193\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/permissions', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}/copy": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postNecessaryCookieEntryByVersionCopy",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntryByVersionCopy } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntryByVersionCopy({\n        client,\n        path: {\n           necessaryCookieEntryId: \"7386\",\n           version: \"356\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}/copy', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}/expire": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postNecessaryCookieEntryByVersionExpire",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntryByVersionExpire } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntryByVersionExpire({\n        client,\n        path: {\n           necessaryCookieEntryId: \"7946\",\n           version: \"9386\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}/expire', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/expire": {
            "post": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "postNecessaryCookieEntryExpire",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { postNecessaryCookieEntryExpire } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await postNecessaryCookieEntryExpire({\n        client,\n        path: {\n           necessaryCookieEntryId: \"2811\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/expire', {\n  method: 'POST',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        },
        "/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}/restore": {
            "put": {
                "tags": [
                    "NecessaryCookieEntry"
                ],
                "operationId": "putNecessaryCookieEntryByVersionRestore",
                "parameters": [
                    {
                        "name": "necessaryCookieEntryId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "default response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NecessaryCookieEntry"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "typescript",
                        "label": "sdk",
                        "source": "import { createClient } from 'liferay-headless-rest-client';\nimport { putNecessaryCookieEntryByVersionRestore } from 'liferay-headless-rest-client/necessary-cookies-entries';\n\nconst client = createClient({\n    baseUrl: 'http://localhost:8080',\n    headers: {\n        Authorization: `Basic ${btoa(\"test@liferay.com:test\")}`,\n    },\n});\n\nasync function main() {\n    const { data } = await putNecessaryCookieEntryByVersionRestore({\n        client,\n        path: {\n           necessaryCookieEntryId: \"1124\",\n           version: \"7051\",\n        },\n    });\n\n    console.log(data);\n}"
                    },
                    {
                        "lang": "javascript",
                        "label": "Liferay.Util.fetch",
                        "source": "const response = await Liferay.Util.fetch('/o/necessary-cookies-entries/{necessaryCookieEntryId}/by-version/{version}/restore', {\n  method: 'PUT',\n})\n\nconst data = await response.json();\n\nconsole.log(data);"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Collaborator": {
                "required": [
                    "actionIds",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "actionIds": {
                        "type": "array",
                        "description": "The collaborator actions for the shared asset.",
                        "items": {
                            "type": "string",
                            "description": "The collaborator actions for the shared asset."
                        }
                    },
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "Block of actions allowed by the user making the request."
                        },
                        "description": "Block of actions allowed by the user making the request.",
                        "readOnly": true
                    },
                    "creator": {
                        "$ref": "#/components/schemas/Creator"
                    },
                    "dateExpired": {
                        "type": "string",
                        "description": "The expiration date to be a collaborator of the asset.",
                        "format": "date-time"
                    },
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The collaborator external reference code.",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "The collaborator ID.",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "The collaborator name.",
                        "readOnly": true
                    },
                    "portrait": {
                        "type": "string",
                        "description": "The collaborator portrait.",
                        "readOnly": true
                    },
                    "share": {
                        "type": "boolean",
                        "description": "If the collaborator can share or not the asset."
                    },
                    "type": {
                        "type": "string",
                        "description": "The collaborator type.",
                        "example": "User"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.object.dto.v1_0.Collaborator"
                    }
                },
                "description": "Represents a collaborator for an entry.",
                "xml": {
                    "name": "Collaborator"
                },
                "x-filterable": []
            },
            "Creator": {
                "type": "object",
                "properties": {
                    "additionalName": {
                        "type": "string",
                        "description": "The author's additional name (e.g., middle name).",
                        "readOnly": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of the content.",
                        "readOnly": true
                    },
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The external reference code of the author.",
                        "readOnly": true
                    },
                    "familyName": {
                        "type": "string",
                        "description": "The author's surname.",
                        "readOnly": true
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The author's first name.",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "The author's ID.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "image": {
                        "type": "string",
                        "description": "A relative URL to the author's profile image.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The author's full name.",
                        "readOnly": true
                    },
                    "profileURL": {
                        "type": "string",
                        "description": "A relative URL to the author's user profile. Optional field, can be embedded with nestedFields.",
                        "readOnly": true
                    },
                    "userGroupBriefs": {
                        "type": "array",
                        "description": "A list of userGroups information.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupBrief"
                        }
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.Creator"
                    }
                },
                "xml": {
                    "name": "Creator"
                },
                "x-filterable": []
            },
            "UserGroupBrief": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the user group.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.headless.delivery.dto.v1_0.UserGroupBrief"
                    }
                },
                "description": "A list of userGroups information.",
                "xml": {
                    "name": "UserGroupBrief"
                },
                "x-filterable": []
            },
            "Facet": {
                "type": "object",
                "properties": {
                    "facetCriteria": {
                        "type": "string"
                    },
                    "facetValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FacetValue"
                        }
                    }
                },
                "x-filterable": []
            },
            "FacetValue": {
                "type": "object",
                "properties": {
                    "numberOfOccurrences": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "term": {
                        "type": "string"
                    }
                },
                "x-filterable": []
            },
            "PageCollaborator": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastPage": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Collaborator"
                        }
                    },
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "facets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Facet"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "x-filterable": []
            },
            "AuditEvent": {
                "type": "object",
                "properties": {
                    "auditFieldChanges": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AuditFieldChange"
                        }
                    },
                    "creator": {
                        "$ref": "#/components/schemas/Creator"
                    },
                    "dateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "eventType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.AuditEvent"
                    }
                },
                "description": "Optional field with the audit events associated with this object entry, can be embedded with nestedFields",
                "xml": {
                    "name": "AuditEvent"
                },
                "x-filterable": []
            },
            "AuditFieldChange": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "newValue": {
                        "type": "object"
                    },
                    "oldValue": {
                        "type": "object"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.AuditFieldChange"
                    }
                },
                "xml": {
                    "name": "AuditFieldChange"
                },
                "x-filterable": []
            },
            "ParentTaxonomyCategory": {
                "type": "object",
                "properties": {
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The parent taxonomy category's external reference code."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.ParentTaxonomyCategory"
                    }
                },
                "xml": {
                    "name": "ParentTaxonomyCategory"
                },
                "x-filterable": []
            },
            "ParentTaxonomyVocabulary": {
                "type": "object",
                "properties": {
                    "externalReferenceCode": {
                        "type": "string",
                        "description": "The parent category's `TaxonomyVocabulary` external reference code."
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.ParentTaxonomyVocabulary"
                    }
                },
                "xml": {
                    "name": "ParentTaxonomyVocabulary"
                },
                "x-filterable": []
            },
            "Permission": {
                "type": "object",
                "properties": {
                    "actionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleExternalReferenceCode": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    },
                    "roleType": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Permission"
                },
                "x-filterable": []
            },
            "Scope": {
                "type": "object",
                "properties": {
                    "externalReferenceCode": {
                        "type": "string"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.Scope"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "AssetLibrary",
                            "Site"
                        ]
                    }
                },
                "xml": {
                    "name": "Scope"
                },
                "x-filterable": []
            },
            "Status": {
                "required": [
                    "code"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "label": {
                        "type": "string"
                    },
                    "label_i18n": {
                        "type": "string"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.Status"
                    }
                },
                "xml": {
                    "name": "Status"
                },
                "x-filterable": []
            },
            "TaxonomyCategoryBrief": {
                "type": "object",
                "properties": {
                    "embeddedTaxonomyCategory": {
                        "type": "object",
                        "description": "Optional field with the embedded taxonomy category, can be embedded with nestedFields",
                        "readOnly": true
                    },
                    "parentTaxonomyCategory": {
                        "$ref": "#/components/schemas/ParentTaxonomyCategory"
                    },
                    "parentTaxonomyVocabulary": {
                        "$ref": "#/components/schemas/ParentTaxonomyVocabulary"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/Scope"
                    },
                    "taxonomyCategoryExternalReferenceCode": {
                        "type": "string",
                        "description": "The category's external reference code."
                    },
                    "taxonomyCategoryId": {
                        "type": "integer",
                        "description": "The category's ID. This can be used to retrieve more information in the `TaxonomyCategory` API.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "taxonomyCategoryName": {
                        "type": "string",
                        "description": "The category's name.",
                        "readOnly": true
                    },
                    "taxonomyCategoryName_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized category's names."
                        },
                        "description": "The localized category's names.",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.TaxonomyCategoryBrief"
                    }
                },
                "description": "The categories associated with this object entry.",
                "xml": {
                    "name": "TaxonomyCategoryBrief"
                },
                "x-filterable": []
            },
            "Version": {
                "type": "object",
                "properties": {
                    "number": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.Version"
                    }
                },
                "xml": {
                    "name": "Version"
                },
                "x-filterable": []
            },
            "PagePermission": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastPage": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    },
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "facets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Facet"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "x-filterable": []
            },
            "ValidationError": {
                "type": "object",
                "properties": {
                    "errorMessage": {
                        "type": "string"
                    },
                    "objectFieldName": {
                        "type": "string"
                    },
                    "objectValidationRuleExternalReferenceCode": {
                        "type": "string"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.ValidationError"
                    }
                },
                "xml": {
                    "name": "ValidationError"
                },
                "x-filterable": []
            },
            "ValidationResponse": {
                "type": "object",
                "properties": {
                    "validationErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.ValidationResponse"
                    }
                },
                "xml": {
                    "name": "ValidationResponse"
                },
                "x-filterable": []
            },
            "ValidationRequest": {
                "type": "object",
                "properties": {
                    "objectValidationRuleExternalReferenceCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "values": {
                        "$ref": "#/components/schemas/NecessaryCookieEntry"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.ValidationRequest"
                    }
                },
                "xml": {
                    "name": "ValidationRequest"
                },
                "x-filterable": []
            },
            "PageNecessaryCookieEntry": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastPage": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NecessaryCookieEntry"
                        }
                    },
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "facets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Facet"
                        }
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "x-schema-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "PageNecessaryCookieEntry"
                    }
                },
                "x-filterable": []
            },
            "NecessaryCookieEntry": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "actions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "readOnly": true,
                        "x-batch-unsupported-formats": "CSV"
                    },
                    "auditEvents": {
                        "type": "array",
                        "description": "Optional field with the audit events associated with this object entry, can be embedded with nestedFields",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AuditEvent"
                        },
                        "x-batch-unsupported-formats": "CSV"
                    },
                    "creator": {
                        "type": "string",
                        "readOnly": true,
                        "x-batch-unsupported-formats": "CSV",
                        "x-parent-map": "properties"
                    },
                    "dateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "dateModified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "defaultLanguageId": {
                        "type": "string"
                    },
                    "displayDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "x-timeStorage": "convertToUTC",
                        "x-parent-map": "properties"
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "x-timeStorage": "convertToUTC",
                        "x-parent-map": "properties"
                    },
                    "externalReferenceCode": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    },
                    "friendlyUrlPath": {
                        "type": "string",
                        "description": "A relative URL to the page's rendered content."
                    },
                    "friendlyUrlPath_i18n": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The localized relative URLs to the page's rendered content."
                        },
                        "description": "The localized relative URLs to the page's rendered content."
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "x-parent-map": "properties"
                    },
                    "keywords": {
                        "type": "array",
                        "description": "A list of keywords describing the object entry.",
                        "items": {
                            "type": "string",
                            "description": "A list of keywords describing the object entry."
                        },
                        "x-batch-unsupported-formats": "CSV"
                    },
                    "objectEntryFolderExternalReferenceCode": {
                        "type": "string"
                    },
                    "objectEntryFolderId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    },
                    "reviewDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "x-timeStorage": "convertToUTC",
                        "x-parent-map": "properties"
                    },
                    "scopeId": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "scopeKey": {
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "x-batch-unsupported-formats": "CSV",
                        "x-parent-map": "properties"
                    },
                    "taxonomyCategoryBriefs": {
                        "type": "array",
                        "description": "The categories associated with this object entry.",
                        "items": {
                            "$ref": "#/components/schemas/TaxonomyCategoryBrief"
                        },
                        "x-batch-unsupported-formats": "CSV"
                    },
                    "taxonomyCategoryIds": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "x-batch-unsupported-formats": "CSV"
                    },
                    "x-class-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "com.liferay.object.rest.dto.v1_0.ObjectEntry"
                    },
                    "x-schema-name": {
                        "type": "string",
                        "readOnly": true,
                        "default": "NecessaryCookieEntry"
                    },
                    "collectedData": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    },
                    "expiration": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    },
                    "host": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    },
                    "purpose": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": false,
                        "x-parent-map": "properties"
                    }
                },
                "xml": {
                    "name": "ObjectEntry"
                },
                "x-filterable": [
                    "collectedData",
                    "createDate",
                    "creator",
                    "creatorId",
                    "dateCreated",
                    "dateModified",
                    "displayDate",
                    "expiration",
                    "expirationDate",
                    "externalReferenceCode",
                    "host",
                    "id",
                    "keywords",
                    "modifiedDate",
                    "name",
                    "purpose",
                    "reviewDate",
                    "status",
                    "taxonomyCategoryIds",
                    "type",
                    "userId"
                ]
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "description": "JWT Bearer token authentication"
            },
            "basicAuth": {
                "type": "http",
                "scheme": "basic",
                "description": "Basic HTTP authentication"
            },
            "apiKeyHeader": {
                "type": "apiKey",
                "in": "header",
                "name": "X-API-Key",
                "description": "API key request header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "in": "query",
                "name": "api_key",
                "description": "API key query parameter"
            },
            "apiKeyCookie": {
                "type": "apiKey",
                "in": "cookie",
                "name": "api_key",
                "description": "API key browser cookie"
            },
            "oAuth2": {
                "type": "oauth2",
                "description": "OAuth 2.0 authentication",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://galaxy.scalar.com/oauth/authorize",
                        "tokenUrl": "https://galaxy.scalar.com/oauth/token",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    },
                    "clientCredentials": {
                        "tokenUrl": "https://galaxy.scalar.com/oauth/token",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    },
                    "implicit": {
                        "authorizationUrl": "https://galaxy.scalar.com/oauth/authorize",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    },
                    "password": {
                        "tokenUrl": "https://galaxy.scalar.com/oauth/token",
                        "scopes": {
                            "read:account": "read your account information",
                            "write:planets": "modify planets in your account",
                            "read:planets": "read your planets"
                        }
                    }
                }
            },
            "openIdConnect": {
                "type": "openIdConnect",
                "openIdConnectUrl": "https://galaxy.scalar.com/.well-known/openid-configuration",
                "description": "OpenID Connect Authentication"
            }
        }
    }
}
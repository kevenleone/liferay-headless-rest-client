// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetEmbeddingEmbeddingModelsPageData, GetEmbeddingEmbeddingModelsPageResponses, PostEmbeddingValidateProviderConfigurationData, PostEmbeddingValidateProviderConfigurationResponses, GetSearchPageData, GetSearchPageResponses, PostSearchPageData, PostSearchPageResponses, PostSuggestionsPageData, PostSuggestionsPageResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getEmbeddingEmbeddingModelsPage = <ThrowOnError extends boolean = false>(options?: Options<GetEmbeddingEmbeddingModelsPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEmbeddingEmbeddingModelsPageResponses, unknown, ThrowOnError>({
        url: '/o/search/v1.0/embeddings/embedding-models',
        ...options
    });
};

export const postEmbeddingValidateProviderConfiguration = <ThrowOnError extends boolean = false>(options?: Options<PostEmbeddingValidateProviderConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostEmbeddingValidateProviderConfigurationResponses, unknown, ThrowOnError>({
        url: '/o/search/v1.0/embeddings/validate-provider-configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search the company index for matching content. This endpoint is development and requires setting the portal property 'feature.flag.LPD-11232' to true or enabling via Instance Settings > Feature Flags: Developer.
 */
export const getSearchPage = <ThrowOnError extends boolean = false>(options?: Options<GetSearchPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSearchPageResponses, unknown, ThrowOnError>({
        url: '/o/search/v1.0/search',
        ...options
    });
};

/**
 * Search the company index for matching content. This endpoint requires setting the portal property 'feature.flag.LPS-179669' to true or enabling via Instance Settings > Feature Flags: Release.
 */
export const postSearchPage = <ThrowOnError extends boolean = false>(options?: Options<PostSearchPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSearchPageResponses, unknown, ThrowOnError>({
        url: '/o/search/v1.0/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postSuggestionsPage = <ThrowOnError extends boolean = false>(options?: Options<PostSuggestionsPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSuggestionsPageResponses, unknown, ThrowOnError>({
        url: '/o/search/v1.0/suggestions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
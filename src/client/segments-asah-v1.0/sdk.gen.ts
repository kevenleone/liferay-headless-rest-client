// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteExperimentData, DeleteExperimentResponses, GetExperimentData, GetExperimentResponses, DeleteExperimentBatchData, DeleteExperimentBatchResponses, PostExperimentRunData, PostExperimentRunResponses, GetOpenApiData, GetOpenApiResponses, PostExperimentStatusData, PostExperimentStatusResponses, PostExperimentStatusBatchData, PostExperimentStatusBatchResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const deleteExperiment = <ThrowOnError extends boolean = false>(options: Options<DeleteExperimentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExperimentResponses, unknown, ThrowOnError>({
        url: '/v1.0/experiments/{experimentId}',
        ...options
    });
};

export const getExperiment = <ThrowOnError extends boolean = false>(options: Options<GetExperimentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExperimentResponses, unknown, ThrowOnError>({
        url: '/v1.0/experiments/{experimentId}',
        ...options
    });
};

export const deleteExperimentBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteExperimentBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteExperimentBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/experiments/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postExperimentRun = <ThrowOnError extends boolean = false>(options: Options<PostExperimentRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostExperimentRunResponses, unknown, ThrowOnError>({
        url: '/v1.0/experiments/{experimentId}/run',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getOpenApi = <ThrowOnError extends boolean = false>(options: Options<GetOpenApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOpenApiResponses, unknown, ThrowOnError>({
        url: '/v1.0/openapi.{type}',
        ...options
    });
};

export const postExperimentStatus = <ThrowOnError extends boolean = false>(options: Options<PostExperimentStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostExperimentStatusResponses, unknown, ThrowOnError>({
        url: '/v1.0/experiments/{experimentId}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postExperimentStatusBatch = <ThrowOnError extends boolean = false>(options: Options<PostExperimentStatusBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostExperimentStatusBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/experiments/{experimentId}/status/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
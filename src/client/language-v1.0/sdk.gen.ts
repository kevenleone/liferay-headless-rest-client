// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { DeleteMessageData, DeleteMessageResponses, GetMessageData, GetMessageResponses, PostMessageData, PostMessageResponses, PutMessageData, PutMessageResponses, DeleteMessageBatchData, DeleteMessageBatchResponses, PostMessageBatchData, PostMessageBatchResponses, PutMessageBatchData, PutMessageBatchResponses, PostMessageImportData, PostMessageImportResponses, PostMessagesExportPageData, PostMessagesExportPageResponses, GetOpenApiData, GetOpenApiResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const deleteMessage = <ThrowOnError extends boolean = false>(options?: Options<DeleteMessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteMessageResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages',
        ...options
    });
};

export const getMessage = <ThrowOnError extends boolean = false>(options?: Options<GetMessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMessageResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages',
        ...options
    });
};

export const postMessage = <ThrowOnError extends boolean = false>(options?: Options<PostMessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMessageResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putMessage = <ThrowOnError extends boolean = false>(options?: Options<PutMessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutMessageResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMessageBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteMessageBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteMessageBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postMessageBatch = <ThrowOnError extends boolean = false>(options?: Options<PostMessageBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMessageBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putMessageBatch = <ThrowOnError extends boolean = false>(options?: Options<PutMessageBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutMessageBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postMessageImport = <ThrowOnError extends boolean = false>(options?: Options<PostMessageImportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMessageImportResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/v1.0/messages/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const postMessagesExportPage = <ThrowOnError extends boolean = false>(options?: Options<PostMessagesExportPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMessagesExportPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/messages/export',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getOpenApi = <ThrowOnError extends boolean = false>(options: Options<GetOpenApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOpenApiResponses, unknown, ThrowOnError>({
        url: '/v1.0/openapi.{type}',
        ...options
    });
};
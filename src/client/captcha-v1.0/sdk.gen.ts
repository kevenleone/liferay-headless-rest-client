// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetCaptchaChallengeData, GetCaptchaChallengeResponses, PostCaptchaResponseData, PostCaptchaResponseResponses, GetOpenApiData, GetOpenApiResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getCaptchaChallenge = <ThrowOnError extends boolean = false>(options?: Options<GetCaptchaChallengeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCaptchaChallengeResponses, unknown, ThrowOnError>({
        url: '/v1.0/captcha/challenge',
        ...options
    });
};

export const postCaptchaResponse = <ThrowOnError extends boolean = false>(options?: Options<PostCaptchaResponseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCaptchaResponseResponses, unknown, ThrowOnError>({
        url: '/v1.0/captcha/response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getOpenApi = <ThrowOnError extends boolean = false>(options: Options<GetOpenApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOpenApiResponses, unknown, ThrowOnError>({
        url: '/v1.0/openapi.{type}',
        ...options
    });
};
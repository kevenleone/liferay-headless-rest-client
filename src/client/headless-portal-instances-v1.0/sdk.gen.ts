// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeletePortalInstanceData, DeletePortalInstanceResponses, GetPortalInstanceData, GetPortalInstanceResponses, PatchPortalInstanceData, PatchPortalInstanceResponses, GetPortalInstancesPageData, GetPortalInstancesPageResponses, PostPortalInstanceData, PostPortalInstanceResponses, PutPortalInstanceActivateData, PutPortalInstanceActivateResponses, PutPortalInstanceDeactivateData, PutPortalInstanceDeactivateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Removes the portal instance
 */
export const deletePortalInstance = <ThrowOnError extends boolean = false>(options: Options<DeletePortalInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePortalInstanceResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}',
        ...options
    });
};

/**
 * Retrieves the portal instance
 */
export const getPortalInstance = <ThrowOnError extends boolean = false>(options: Options<GetPortalInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPortalInstanceResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}',
        ...options
    });
};

/**
 * Updates the portal instance with information sent in the request body. Only the provided fields are updated.
 */
export const patchPortalInstance = <ThrowOnError extends boolean = false>(options: Options<PatchPortalInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPortalInstanceResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the portal instances
 */
export const getPortalInstancesPage = <ThrowOnError extends boolean = false>(options?: Options<GetPortalInstancesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPortalInstancesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances',
        ...options
    });
};

/**
 * Adds a new portal instance
 */
export const postPortalInstance = <ThrowOnError extends boolean = false>(options?: Options<PostPortalInstanceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPortalInstanceResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Activates the portal instance
 */
export const putPortalInstanceActivate = <ThrowOnError extends boolean = false>(options: Options<PutPortalInstanceActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPortalInstanceActivateResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}/activate',
        ...options
    });
};

/**
 * Deactivates the portal instance. When a portal instance is deactivated, its virtual host will not longer respond requests.
 */
export const putPortalInstanceDeactivate = <ThrowOnError extends boolean = false>(options: Options<PutPortalInstanceDeactivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPortalInstanceDeactivateResponses, unknown, ThrowOnError>({
        url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}/deactivate',
        ...options
    });
};
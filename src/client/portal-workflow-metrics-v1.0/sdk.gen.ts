// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostProcessAssigneeMetricsPageData, PostProcessAssigneeMetricsPageResponses, PostProcessAssigneesPageData, PostProcessAssigneesPageResponses, GetCalendarsPageData, GetCalendarsPageResponses, PostCalendarsPageExportBatchData, PostCalendarsPageExportBatchResponses, GetProcessHistogramMetricData, GetProcessHistogramMetricResponses, GetIndexesPageData, GetIndexesPageResponses, PatchIndexRefreshData, PatchIndexRefreshResponses, PatchIndexReindexData, PatchIndexReindexResponses, PostIndexesPageExportBatchData, PostIndexesPageExportBatchResponses, DeleteProcessInstanceData, DeleteProcessInstanceResponses, GetProcessInstanceData, GetProcessInstanceResponses, PatchProcessInstanceData, PatchProcessInstanceResponses, GetProcessInstancesPageData, GetProcessInstancesPageResponses, PostProcessInstanceData, PostProcessInstanceResponses, PatchProcessInstanceCompleteData, PatchProcessInstanceCompleteResponses, PostProcessInstanceBatchData, PostProcessInstanceBatchResponses, PostProcessInstancesPageExportBatchData, PostProcessInstancesPageExportBatchResponses, GetProcessNodeMetricsPageData, GetProcessNodeMetricsPageResponses, DeleteProcessNodeData, DeleteProcessNodeResponses, GetProcessNodesPageData, GetProcessNodesPageResponses, PostProcessNodeData, PostProcessNodeResponses, PostProcessNodeBatchData, PostProcessNodeBatchResponses, PostProcessNodesPageExportBatchData, PostProcessNodesPageExportBatchResponses, GetOpenApiData, GetOpenApiResponses, GetProcessMetricData, GetProcessMetricResponses, GetProcessMetricsPageData, GetProcessMetricsPageResponses, PostProcessMetricsPageExportBatchData, PostProcessMetricsPageExportBatchResponses, DeleteProcessData, DeleteProcessResponses, GetProcessData, GetProcessResponses, PutProcessData, PutProcessResponses, DeleteProcessBatchData, DeleteProcessBatchResponses, PostProcessBatchData, PostProcessBatchResponses, PutProcessBatchData, PutProcessBatchResponses, GetProcessTitleData, GetProcessTitleResponses, PostProcessData, PostProcessResponses, GetProcessProcessVersionsPageData, GetProcessProcessVersionsPageResponses, PostProcessProcessVersionsPageExportBatchData, PostProcessProcessVersionsPageExportBatchResponses, GetReindexStatusesPageData, GetReindexStatusesPageResponses, PostReindexStatusesPageExportBatchData, PostReindexStatusesPageExportBatchResponses, GetProcessRolesPageData, GetProcessRolesPageResponses, PostProcessRolesPageExportBatchData, PostProcessRolesPageExportBatchResponses, DeleteSlaData, DeleteSlaResponses, GetSlaData, GetSlaResponses, PutSlaData, PutSlaResponses, DeleteSlaBatchData, DeleteSlaBatchResponses, PutSlaBatchData, PutSlaBatchResponses, GetProcessSlasPageData, GetProcessSlasPageResponses, PostProcessSlaData, PostProcessSlaResponses, PostProcessSlaBatchData, PostProcessSlaBatchResponses, PostProcessSlasPageExportBatchData, PostProcessSlasPageExportBatchResponses, GetProcessLastSlaResultData, GetProcessLastSlaResultResponses, DeleteProcessTaskData, DeleteProcessTaskResponses, GetProcessTaskData, GetProcessTaskResponses, PatchProcessTaskData, PatchProcessTaskResponses, GetProcessTasksPageData, GetProcessTasksPageResponses, PostProcessTaskData, PostProcessTaskResponses, PatchProcessTaskCompleteData, PatchProcessTaskCompleteResponses, PostProcessTaskBatchData, PostProcessTaskBatchResponses, PostProcessTasksPageExportBatchData, PostProcessTasksPageExportBatchResponses, PostTasksPageData, PostTasksPageResponses, GetTimeRangesPageData, GetTimeRangesPageResponses, PostTimeRangesPageExportBatchData, PostTimeRangesPageExportBatchResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postProcessAssigneeMetricsPage = <ThrowOnError extends boolean = false>(options: Options<PostProcessAssigneeMetricsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessAssigneeMetricsPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/assignees/metrics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessAssigneesPage = <ThrowOnError extends boolean = false>(options: Options<PostProcessAssigneesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessAssigneesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/assignees',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getCalendarsPage = <ThrowOnError extends boolean = false>(options?: Options<GetCalendarsPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCalendarsPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/calendars',
        ...options
    });
};

export const postCalendarsPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostCalendarsPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCalendarsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/calendars/export-batch',
        ...options
    });
};

export const getProcessHistogramMetric = <ThrowOnError extends boolean = false>(options: Options<GetProcessHistogramMetricData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessHistogramMetricResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/histograms/metrics',
        ...options
    });
};

export const getIndexesPage = <ThrowOnError extends boolean = false>(options?: Options<GetIndexesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIndexesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/indexes',
        ...options
    });
};

export const patchIndexRefresh = <ThrowOnError extends boolean = false>(options?: Options<PatchIndexRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchIndexRefreshResponses, unknown, ThrowOnError>({
        url: '/v1.0/indexes/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const patchIndexReindex = <ThrowOnError extends boolean = false>(options?: Options<PatchIndexReindexData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchIndexReindexResponses, unknown, ThrowOnError>({
        url: '/v1.0/indexes/reindex',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postIndexesPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostIndexesPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostIndexesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/indexes/export-batch',
        ...options
    });
};

export const deleteProcessInstance = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProcessInstanceResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances/{instanceId}',
        ...options
    });
};

export const getProcessInstance = <ThrowOnError extends boolean = false>(options: Options<GetProcessInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessInstanceResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances/{instanceId}',
        ...options
    });
};

export const patchProcessInstance = <ThrowOnError extends boolean = false>(options: Options<PatchProcessInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProcessInstanceResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances/{instanceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getProcessInstancesPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessInstancesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessInstancesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances',
        ...options
    });
};

export const postProcessInstance = <ThrowOnError extends boolean = false>(options: Options<PostProcessInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessInstanceResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const patchProcessInstanceComplete = <ThrowOnError extends boolean = false>(options: Options<PatchProcessInstanceCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProcessInstanceCompleteResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances/{instanceId}/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessInstanceBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessInstanceBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessInstanceBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessInstancesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessInstancesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessInstancesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/instances/export-batch',
        ...options
    });
};

export const getProcessNodeMetricsPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessNodeMetricsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessNodeMetricsPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/nodes/metrics',
        ...options
    });
};

export const deleteProcessNode = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessNodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProcessNodeResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/nodes/{nodeId}',
        ...options
    });
};

export const getProcessNodesPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessNodesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessNodesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/nodes',
        ...options
    });
};

export const postProcessNode = <ThrowOnError extends boolean = false>(options: Options<PostProcessNodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessNodeResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessNodeBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessNodeBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessNodeBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/nodes/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessNodesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessNodesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessNodesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/nodes/export-batch',
        ...options
    });
};

export const getOpenApi = <ThrowOnError extends boolean = false>(options: Options<GetOpenApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOpenApiResponses, unknown, ThrowOnError>({
        url: '/v1.0/openapi.{type}',
        ...options
    });
};

export const getProcessMetric = <ThrowOnError extends boolean = false>(options: Options<GetProcessMetricData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessMetricResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/metrics',
        ...options
    });
};

export const getProcessMetricsPage = <ThrowOnError extends boolean = false>(options?: Options<GetProcessMetricsPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessMetricsPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/metrics',
        ...options
    });
};

export const postProcessMetricsPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostProcessMetricsPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostProcessMetricsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/metrics/export-batch',
        ...options
    });
};

export const deleteProcess = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProcessResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}',
        ...options
    });
};

export const getProcess = <ThrowOnError extends boolean = false>(options: Options<GetProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}',
        ...options
    });
};

export const putProcess = <ThrowOnError extends boolean = false>(options: Options<PutProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutProcessResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteProcessBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteProcessBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteProcessBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postProcessBatch = <ThrowOnError extends boolean = false>(options?: Options<PostProcessBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostProcessBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putProcessBatch = <ThrowOnError extends boolean = false>(options?: Options<PutProcessBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutProcessBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getProcessTitle = <ThrowOnError extends boolean = false>(options: Options<GetProcessTitleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessTitleResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/title',
        ...options
    });
};

export const postProcess = <ThrowOnError extends boolean = false>(options?: Options<PostProcessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostProcessResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getProcessProcessVersionsPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessProcessVersionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessProcessVersionsPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/process-versions',
        ...options
    });
};

export const postProcessProcessVersionsPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessProcessVersionsPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessProcessVersionsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/process-versions/export-batch',
        ...options
    });
};

export const getReindexStatusesPage = <ThrowOnError extends boolean = false>(options?: Options<GetReindexStatusesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetReindexStatusesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/reindex/statuses',
        ...options
    });
};

export const postReindexStatusesPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostReindexStatusesPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostReindexStatusesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/reindex/statuses/export-batch',
        ...options
    });
};

export const getProcessRolesPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessRolesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessRolesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/roles',
        ...options
    });
};

export const postProcessRolesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessRolesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessRolesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/roles/export-batch',
        ...options
    });
};

export const deleteSla = <ThrowOnError extends boolean = false>(options: Options<DeleteSlaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSlaResponses, unknown, ThrowOnError>({
        url: '/v1.0/slas/{slaId}',
        ...options
    });
};

export const getSla = <ThrowOnError extends boolean = false>(options: Options<GetSlaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSlaResponses, unknown, ThrowOnError>({
        url: '/v1.0/slas/{slaId}',
        ...options
    });
};

export const putSla = <ThrowOnError extends boolean = false>(options: Options<PutSlaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSlaResponses, unknown, ThrowOnError>({
        url: '/v1.0/slas/{slaId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteSlaBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteSlaBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteSlaBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/slas/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putSlaBatch = <ThrowOnError extends boolean = false>(options?: Options<PutSlaBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutSlaBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/slas/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getProcessSlasPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessSlasPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessSlasPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/slas',
        ...options
    });
};

export const postProcessSla = <ThrowOnError extends boolean = false>(options: Options<PostProcessSlaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessSlaResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/slas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessSlaBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessSlaBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessSlaBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/slas/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessSlasPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessSlasPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessSlasPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/slas/export-batch',
        ...options
    });
};

export const getProcessLastSlaResult = <ThrowOnError extends boolean = false>(options: Options<GetProcessLastSlaResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessLastSlaResultResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/last-sla-result',
        ...options
    });
};

export const deleteProcessTask = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProcessTaskResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks/{taskId}',
        ...options
    });
};

export const getProcessTask = <ThrowOnError extends boolean = false>(options: Options<GetProcessTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessTaskResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks/{taskId}',
        ...options
    });
};

export const patchProcessTask = <ThrowOnError extends boolean = false>(options: Options<PatchProcessTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProcessTaskResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks/{taskId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getProcessTasksPage = <ThrowOnError extends boolean = false>(options: Options<GetProcessTasksPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessTasksPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks',
        ...options
    });
};

export const postProcessTask = <ThrowOnError extends boolean = false>(options: Options<PostProcessTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessTaskResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const patchProcessTaskComplete = <ThrowOnError extends boolean = false>(options: Options<PatchProcessTaskCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProcessTaskCompleteResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks/{taskId}/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessTaskBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessTaskBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessTaskBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProcessTasksPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostProcessTasksPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessTasksPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/processes/{processId}/tasks/export-batch',
        ...options
    });
};

export const postTasksPage = <ThrowOnError extends boolean = false>(options?: Options<PostTasksPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTasksPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTimeRangesPage = <ThrowOnError extends boolean = false>(options?: Options<GetTimeRangesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimeRangesPageResponses, unknown, ThrowOnError>({
        url: '/v1.0/time-ranges',
        ...options
    });
};

export const postTimeRangesPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostTimeRangesPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTimeRangesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/v1.0/time-ranges/export-batch',
        ...options
    });
};
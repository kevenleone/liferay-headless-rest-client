// This file is auto-generated by @hey-api/openapi-ts

export type Assignee = {
    /**
     * The user's ID.
     */
    readonly id?: number;
    /**
     * The user's full name.
     */
    readonly name?: string;
    readonly 'x-class-name'?: string;
};

export type Facet = {
    facetCriteria?: string;
    facetValues?: Array<FacetValue>;
};

export type FacetValue = {
    numberOfOccurrences?: number;
    term?: string;
};

export type PageAssignee = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<Assignee>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type PageTransition = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<Transition>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type Transition = {
    readonly label?: string;
    readonly name?: string;
    readonly sourceNodeName?: string;
    readonly targetNodeName?: string;
    readonly 'x-class-name'?: string;
};

export type PageWorkflowDefinitionLink = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<WorkflowDefinitionLink>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type WorkflowDefinitionLink = {
    className?: string;
    externalReferenceCode?: string;
    groupExternalReferenceCode?: string;
    groupId?: number;
    readonly id?: number;
    /**
     * The name of the instance's workflow definition.
     */
    workflowDefinitionName?: string;
    workflowDefinitionVersion?: number;
    readonly 'x-class-name'?: string;
};

/**
 * The role's creator.
 */
export type Creator = {
    /**
     * The user's additional name, which can be used as a middle name.
     */
    readonly additionalName?: string;
    /**
     * The type of the content.
     */
    readonly contentType?: string;
    /**
     * The user's surname (last name).
     */
    readonly familyName?: string;
    /**
     * The user's first name.
     */
    readonly givenName?: string;
    /**
     * The user's ID.
     */
    readonly id?: number;
    /**
     * A relative URL to the user's profile image.
     */
    readonly image?: string;
    /**
     * The user's full name.
     */
    readonly name?: string;
    /**
     * A relative URL to the user's profile.
     */
    readonly profileURL?: string;
    readonly 'x-class-name'?: string;
};

export type Node = {
    readonly label?: string;
    readonly name?: string;
    readonly 'x-class-name'?: string;
    /**
     * The workflow's node types.
     */
    type?: 'CONDITION' | 'FORK' | 'INITIAL_STATE' | 'JOIN' | 'JOIN_XOR' | 'STATE' | 'TASK' | 'TERMINAL_STATE';
};

export type WorkflowDefinition = {
    readonly actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    active?: boolean;
    content?: string;
    creator?: Creator;
    readonly dateCreated?: string;
    readonly dateModified?: string;
    readonly description?: string;
    externalReferenceCode?: string;
    readonly id?: number;
    name?: string;
    readonly nodes?: Array<Node>;
    title?: string;
    title_i18n?: {
        [key: string]: string;
    };
    readonly transitions?: Array<Transition>;
    version?: string;
    readonly 'x-class-name'?: string;
};

export type PageWorkflowDefinition = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<WorkflowDefinition>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

/**
 * The object/asset that the task's workflow is managing.
 */
export type ObjectReviewed = {
    readonly assetTitle?: string;
    readonly assetType?: string;
    /**
     * The resource's ID.
     */
    readonly id?: number;
    /**
     * The resource's type.
     */
    readonly resourceType?: string;
    readonly 'x-class-name'?: string;
};

export type WorkflowInstance = {
    readonly actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    /**
     * A flag that indicates whether the instance is complete.
     */
    readonly completed?: boolean;
    /**
     * The instance's current node names.
     */
    readonly currentNodeNames?: Array<string>;
    /**
     * The instance's completion date.
     */
    readonly dateCompletion?: string;
    /**
     * The instance's creation date.
     */
    readonly dateCreated?: string;
    /**
     * The instance's ID.
     */
    readonly id?: number;
    objectReviewed?: ObjectReviewed;
    /**
     * The name of the instance's workflow definition.
     */
    readonly workflowDefinitionName?: string;
    readonly workflowDefinitionVersion?: string;
    readonly 'x-class-name'?: string;
};

export type PageWorkflowInstance = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<WorkflowInstance>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type ChangeTransition = {
    comment?: string;
    transitionName?: string;
    workflowTaskId?: number;
    readonly 'x-class-name'?: string;
};

export type WorkflowInstanceSubmit = {
    context?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    siteId?: number;
    transitionName?: string;
    workflowDefinitionName?: string;
    workflowDefinitionVersion?: string;
    readonly 'x-class-name'?: string;
};

export type PageWorkflowLog = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<WorkflowLog>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type Role = {
    /**
     * A list of languages for which the role has a translation.
     */
    readonly availableLanguages?: Array<string>;
    creator?: Creator;
    /**
     * The role's creation date.
     */
    readonly dateCreated?: string;
    /**
     * The last time any of the role's fields were changed.
     */
    readonly dateModified?: string;
    /**
     * The role's description.
     */
    readonly description?: string;
    readonly description_i18n?: {
        [key: string]: string;
    };
    /**
     * The role's ID.
     */
    readonly id?: number;
    /**
     * The role's name.
     */
    readonly name?: string;
    readonly name_i18n?: {
        [key: string]: string;
    };
    /**
     * The role's type.
     */
    readonly roleType?: string;
    readonly 'x-class-name'?: string;
};

export type WorkflowLog = {
    auditPerson?: Creator;
    /**
     * The log's comments.
     */
    readonly commentLog?: string;
    /**
     * The log's creation date.
     */
    readonly dateCreated?: string;
    /**
     * The log's description.
     */
    readonly description?: string;
    /**
     * The log's ID.
     */
    readonly id?: number;
    person?: Creator;
    previousPerson?: Creator;
    previousRole?: Role;
    /**
     * The workflow's previous state.
     */
    readonly previousState?: string;
    /**
     * The workflow's previous state Label.
     */
    readonly previousStateLabel?: string;
    role?: Role;
    /**
     * The workflow's current state.
     */
    readonly state?: string;
    /**
     * The workflow's current state Label.
     */
    readonly stateLabel?: string;
    /**
     * The task associated with this workflow log.
     */
    readonly workflowTaskId?: number;
    readonly 'x-class-name'?: string;
    /**
     * The workflow log's type.
     */
    type?: 'InstanceFail' | 'NodeEntry' | 'TaskAssign' | 'TaskCompletion' | 'TaskUpdate' | 'Transition';
};

export type WorkflowTaskAssignableUser = {
    assignableUsers?: Array<Assignee>;
    workflowTaskId?: number;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskAssignableUsers = {
    workflowTaskAssignableUsers?: Array<WorkflowTaskAssignableUser>;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskIds = {
    workflowTaskIds?: Array<number>;
    readonly 'x-class-name'?: string;
};

export type PageWorkflowTask = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<WorkflowTask>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type WorkflowTask = {
    readonly actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    assigneePerson?: Creator;
    assigneeRoles?: Array<Role>;
    /**
     * A flag that indicates whether the task is complete.
     */
    readonly completed?: boolean;
    /**
     * The task's completion date.
     */
    readonly dateCompletion?: string;
    /**
     * The task's creation date.
     */
    readonly dateCreated?: string;
    /**
     * The date the task should be completed by.
     */
    readonly dateDue?: string;
    /**
     * The task's description.
     */
    readonly description?: string;
    /**
     * The task's ID.
     */
    readonly id?: number;
    readonly label?: string;
    /**
     * The task's name.
     */
    readonly name?: string;
    objectReviewed?: ObjectReviewed;
    readonly workflowDefinitionId?: number;
    /**
     * The name of the task's workflow definition.
     */
    readonly workflowDefinitionName?: string;
    readonly workflowDefinitionVersion?: string;
    readonly workflowInstanceId?: number;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskAssignToUser = {
    assigneeId?: number;
    comment?: string;
    dueDate?: string;
    workflowTaskId?: number;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskAssignToMe = {
    comment?: string;
    dueDate?: string;
    workflowTaskId?: number;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskAssignToRole = {
    comment?: string;
    dueDate?: string;
    roleId?: number;
    readonly 'x-class-name'?: string;
};

export type WorkflowTasksBulkSelection = {
    andOperator?: boolean;
    assetPrimaryKeys?: Array<number>;
    assetTitle?: string;
    assetTypes?: Array<string>;
    assigneeIds?: Array<number>;
    completed?: boolean;
    dateDueEnd?: string;
    dateDueStart?: string;
    searchByRoles?: boolean;
    searchByUserRoles?: boolean;
    workflowDefinitionId?: number;
    workflowInstanceIds?: Array<number>;
    workflowTaskNames?: Array<string>;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskTransition = {
    transitions?: Array<Transition>;
    workflowDefinitionVersion?: string;
    workflowTaskLabel?: string;
    workflowTaskName?: string;
    readonly 'x-class-name'?: string;
};

export type WorkflowTaskTransitions = {
    workflowTaskTransitions?: Array<WorkflowTaskTransition>;
    readonly 'x-class-name'?: string;
};

export type GetWorkflowTaskAssignableUsersPageData = {
    body?: never;
    path: {
        workflowTaskId: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assignable-users';
};

export type GetWorkflowTaskAssignableUsersPageResponses = {
    /**
     * default response
     */
    default: PageAssignee;
};

export type GetWorkflowTaskAssignableUsersPageResponse = GetWorkflowTaskAssignableUsersPageResponses[keyof GetWorkflowTaskAssignableUsersPageResponses];

export type GetWorkflowInstanceNextTransitionsPageData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/next-transitions';
};

export type GetWorkflowInstanceNextTransitionsPageResponses = {
    /**
     * default response
     */
    default: PageTransition;
};

export type GetWorkflowInstanceNextTransitionsPageResponse = GetWorkflowInstanceNextTransitionsPageResponses[keyof GetWorkflowInstanceNextTransitionsPageResponses];

export type GetWorkflowTaskNextTransitionsPageData = {
    body?: never;
    path: {
        workflowTaskId: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/next-transitions';
};

export type GetWorkflowTaskNextTransitionsPageResponses = {
    /**
     * default response
     */
    default: PageTransition;
};

export type GetWorkflowTaskNextTransitionsPageResponse = GetWorkflowTaskNextTransitionsPageResponses[keyof GetWorkflowTaskNextTransitionsPageResponses];

export type GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageData = {
    body?: never;
    path: {
        externalReferenceCode: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/by-external-reference-code/{externalReferenceCode}/workflow-definition-links';
};

export type GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowDefinitionLink;
};

export type GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageResponse = GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageResponses[keyof GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageResponses];

export type PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkData = {
    body?: WorkflowDefinitionLink;
    path: {
        externalReferenceCode: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/by-external-reference-code/{externalReferenceCode}/workflow-definition-links';
};

export type PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkResponses = {
    /**
     * default response
     */
    default: WorkflowDefinitionLink;
};

export type PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkResponse = PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkResponses[keyof PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkResponses];

export type GetWorkflowDefinitionWorkflowDefinitionLinksPageData = {
    body?: never;
    path: {
        workflowDefinitionId: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links';
};

export type GetWorkflowDefinitionWorkflowDefinitionLinksPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowDefinitionLink;
};

export type GetWorkflowDefinitionWorkflowDefinitionLinksPageResponse = GetWorkflowDefinitionWorkflowDefinitionLinksPageResponses[keyof GetWorkflowDefinitionWorkflowDefinitionLinksPageResponses];

export type PostWorkflowDefinitionWorkflowDefinitionLinkData = {
    body?: WorkflowDefinitionLink;
    path: {
        workflowDefinitionId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links';
};

export type PostWorkflowDefinitionWorkflowDefinitionLinkResponses = {
    /**
     * default response
     */
    default: WorkflowDefinitionLink;
};

export type PostWorkflowDefinitionWorkflowDefinitionLinkResponse = PostWorkflowDefinitionWorkflowDefinitionLinkResponses[keyof PostWorkflowDefinitionWorkflowDefinitionLinkResponses];

export type PostWorkflowDefinitionWorkflowDefinitionLinkBatchData = {
    body?: {
        [key: string]: unknown;
    };
    path: {
        workflowDefinitionId: string;
    };
    query?: {
        callbackURL?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links/batch';
};

export type PostWorkflowDefinitionWorkflowDefinitionLinkBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostWorkflowDefinitionWorkflowDefinitionLinksPageExportBatchData = {
    body?: never;
    path: {
        workflowDefinitionId: string;
    };
    query?: {
        callbackURL?: string;
        contentType?: string;
        fieldNames?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links/export-batch';
};

export type PostWorkflowDefinitionWorkflowDefinitionLinksPageExportBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PutWorkflowDefinitionLinkByExternalReferenceCodeData = {
    body?: WorkflowDefinitionLink;
    path: {
        externalReferenceCode: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definition-links/by-external-reference-code/{externalReferenceCode}';
};

export type PutWorkflowDefinitionLinkByExternalReferenceCodeResponses = {
    /**
     * default response
     */
    default: WorkflowDefinitionLink;
};

export type PutWorkflowDefinitionLinkByExternalReferenceCodeResponse = PutWorkflowDefinitionLinkByExternalReferenceCodeResponses[keyof PutWorkflowDefinitionLinkByExternalReferenceCodeResponses];

export type DeleteWorkflowDefinitionData = {
    body?: never;
    path: {
        workflowDefinitionId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}';
};

export type DeleteWorkflowDefinitionResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetWorkflowDefinitionData = {
    body?: never;
    path: {
        workflowDefinitionId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}';
};

export type GetWorkflowDefinitionResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type GetWorkflowDefinitionResponse = GetWorkflowDefinitionResponses[keyof GetWorkflowDefinitionResponses];

export type PutWorkflowDefinitionData = {
    body?: WorkflowDefinition;
    path: {
        workflowDefinitionId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}';
};

export type PutWorkflowDefinitionResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type PutWorkflowDefinitionResponse = PutWorkflowDefinitionResponses[keyof PutWorkflowDefinitionResponses];

export type DeleteWorkflowDefinitionBatchData = {
    body?: {
        [key: string]: unknown;
    };
    path?: never;
    query?: {
        callbackURL?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/batch';
};

export type DeleteWorkflowDefinitionBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostWorkflowDefinitionBatchData = {
    body?: {
        [key: string]: unknown;
    };
    path?: never;
    query?: {
        callbackURL?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/batch';
};

export type PostWorkflowDefinitionBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PutWorkflowDefinitionBatchData = {
    body?: {
        [key: string]: unknown;
    };
    path?: never;
    query?: {
        callbackURL?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/batch';
};

export type PutWorkflowDefinitionBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type DeleteWorkflowDefinitionUndeployData = {
    body?: never;
    path?: never;
    query?: {
        name?: string;
        version?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/undeploy';
};

export type DeleteWorkflowDefinitionUndeployResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetWorkflowDefinitionByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        contentFormat?: string;
        version?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/by-name/{name}';
};

export type GetWorkflowDefinitionByNameResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type GetWorkflowDefinitionByNameResponse = GetWorkflowDefinitionByNameResponses[keyof GetWorkflowDefinitionByNameResponses];

export type GetWorkflowDefinitionsPageData = {
    body?: never;
    path?: never;
    query?: {
        active?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions';
};

export type GetWorkflowDefinitionsPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowDefinition;
};

export type GetWorkflowDefinitionsPageResponse = GetWorkflowDefinitionsPageResponses[keyof GetWorkflowDefinitionsPageResponses];

export type PostWorkflowDefinitionData = {
    body?: WorkflowDefinition;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions';
};

export type PostWorkflowDefinitionResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type PostWorkflowDefinitionResponse = PostWorkflowDefinitionResponses[keyof PostWorkflowDefinitionResponses];

export type PostWorkflowDefinitionDeployData = {
    body?: WorkflowDefinition;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/deploy';
};

export type PostWorkflowDefinitionDeployResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type PostWorkflowDefinitionDeployResponse = PostWorkflowDefinitionDeployResponses[keyof PostWorkflowDefinitionDeployResponses];

export type PostWorkflowDefinitionSaveData = {
    body?: WorkflowDefinition;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/save';
};

export type PostWorkflowDefinitionSaveResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type PostWorkflowDefinitionSaveResponse = PostWorkflowDefinitionSaveResponses[keyof PostWorkflowDefinitionSaveResponses];

export type PostWorkflowDefinitionUpdateActiveData = {
    body?: never;
    path?: never;
    query?: {
        active?: string;
        name?: string;
        version?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/update-active';
};

export type PostWorkflowDefinitionUpdateActiveResponses = {
    /**
     * default response
     */
    default: WorkflowDefinition;
};

export type PostWorkflowDefinitionUpdateActiveResponse = PostWorkflowDefinitionUpdateActiveResponses[keyof PostWorkflowDefinitionUpdateActiveResponses];

export type PostWorkflowDefinitionsPageExportBatchData = {
    body?: never;
    path?: never;
    query?: {
        active?: string;
        sort?: string;
        callbackURL?: string;
        contentType?: string;
        fieldNames?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-definitions/export-batch';
};

export type PostWorkflowDefinitionsPageExportBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type DeleteWorkflowInstanceData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}';
};

export type DeleteWorkflowInstanceResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetWorkflowInstanceData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}';
};

export type GetWorkflowInstanceResponses = {
    /**
     * default response
     */
    default: WorkflowInstance;
};

export type GetWorkflowInstanceResponse = GetWorkflowInstanceResponses[keyof GetWorkflowInstanceResponses];

export type DeleteWorkflowInstanceBatchData = {
    body?: {
        [key: string]: unknown;
    };
    path?: never;
    query?: {
        callbackURL?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/batch';
};

export type DeleteWorkflowInstanceBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetWorkflowInstancesPageData = {
    body?: never;
    path?: never;
    query?: {
        assetClassName?: string;
        assetPrimaryKey?: string;
        completed?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances';
};

export type GetWorkflowInstancesPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowInstance;
};

export type GetWorkflowInstancesPageResponse = GetWorkflowInstancesPageResponses[keyof GetWorkflowInstancesPageResponses];

export type PostWorkflowInstanceChangeTransitionData = {
    body?: ChangeTransition;
    path: {
        workflowInstanceId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/change-transition';
};

export type PostWorkflowInstanceChangeTransitionResponses = {
    /**
     * default response
     */
    default: WorkflowInstance;
};

export type PostWorkflowInstanceChangeTransitionResponse = PostWorkflowInstanceChangeTransitionResponses[keyof PostWorkflowInstanceChangeTransitionResponses];

export type PostWorkflowInstanceSubmitData = {
    body?: WorkflowInstanceSubmit;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/submit';
};

export type PostWorkflowInstanceSubmitResponses = {
    /**
     * default response
     */
    default: WorkflowInstance;
};

export type PostWorkflowInstanceSubmitResponse = PostWorkflowInstanceSubmitResponses[keyof PostWorkflowInstanceSubmitResponses];

export type PostWorkflowInstancesPageExportBatchData = {
    body?: never;
    path?: never;
    query?: {
        assetClassName?: string;
        assetPrimaryKey?: string;
        completed?: string;
        callbackURL?: string;
        contentType?: string;
        fieldNames?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/export-batch';
};

export type PostWorkflowInstancesPageExportBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetWorkflowInstanceWorkflowLogsPageData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        types?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-logs';
};

export type GetWorkflowInstanceWorkflowLogsPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowLog;
};

export type GetWorkflowInstanceWorkflowLogsPageResponse = GetWorkflowInstanceWorkflowLogsPageResponses[keyof GetWorkflowInstanceWorkflowLogsPageResponses];

export type GetWorkflowLogData = {
    body?: never;
    path: {
        workflowLogId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-logs/{workflowLogId}';
};

export type GetWorkflowLogResponses = {
    /**
     * default response
     */
    default: WorkflowLog;
};

export type GetWorkflowLogResponse = GetWorkflowLogResponses[keyof GetWorkflowLogResponses];

export type GetWorkflowTaskWorkflowLogsPageData = {
    body?: never;
    path: {
        workflowTaskId: string;
    };
    query?: {
        page?: string;
        pageSize?: string;
        types?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/workflow-logs';
};

export type GetWorkflowTaskWorkflowLogsPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowLog;
};

export type GetWorkflowTaskWorkflowLogsPageResponse = GetWorkflowTaskWorkflowLogsPageResponses[keyof GetWorkflowTaskWorkflowLogsPageResponses];

export type PostWorkflowInstanceWorkflowLogsPageExportBatchData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        types?: string;
        callbackURL?: string;
        contentType?: string;
        fieldNames?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-logs/export-batch';
};

export type PostWorkflowInstanceWorkflowLogsPageExportBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostWorkflowTaskWorkflowLogsPageExportBatchData = {
    body?: never;
    path: {
        workflowTaskId: string;
    };
    query?: {
        types?: string;
        callbackURL?: string;
        contentType?: string;
        fieldNames?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/workflow-logs/export-batch';
};

export type PostWorkflowTaskWorkflowLogsPageExportBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostWorkflowTaskAssignableUserData = {
    body?: WorkflowTaskIds;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assignable-users';
};

export type PostWorkflowTaskAssignableUserResponses = {
    /**
     * default response
     */
    default: WorkflowTaskAssignableUsers;
};

export type PostWorkflowTaskAssignableUserResponse = PostWorkflowTaskAssignableUserResponses[keyof PostWorkflowTaskAssignableUserResponses];

export type GetWorkflowInstanceWorkflowTasksAssignedToMePageData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        completed?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks/assigned-to-me';
};

export type GetWorkflowInstanceWorkflowTasksAssignedToMePageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowInstanceWorkflowTasksAssignedToMePageResponse = GetWorkflowInstanceWorkflowTasksAssignedToMePageResponses[keyof GetWorkflowInstanceWorkflowTasksAssignedToMePageResponses];

export type GetWorkflowInstanceWorkflowTasksAssignedToUserPageData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        assigneeId?: string;
        completed?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks/assigned-to-user';
};

export type GetWorkflowInstanceWorkflowTasksAssignedToUserPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowInstanceWorkflowTasksAssignedToUserPageResponse = GetWorkflowInstanceWorkflowTasksAssignedToUserPageResponses[keyof GetWorkflowInstanceWorkflowTasksAssignedToUserPageResponses];

export type GetWorkflowInstanceWorkflowTasksPageData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        completed?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks';
};

export type GetWorkflowInstanceWorkflowTasksPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowInstanceWorkflowTasksPageResponse = GetWorkflowInstanceWorkflowTasksPageResponses[keyof GetWorkflowInstanceWorkflowTasksPageResponses];

export type GetWorkflowTaskData = {
    body?: never;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}';
};

export type GetWorkflowTaskResponses = {
    /**
     * default response
     */
    default: WorkflowTask;
};

export type GetWorkflowTaskResponse = GetWorkflowTaskResponses[keyof GetWorkflowTaskResponses];

export type GetWorkflowTaskHasAssignableUsersData = {
    body?: never;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/has-assignable-users';
};

export type GetWorkflowTaskHasAssignableUsersResponses = {
    /**
     * default response
     */
    default: boolean;
};

export type GetWorkflowTaskHasAssignableUsersResponse = GetWorkflowTaskHasAssignableUsersResponses[keyof GetWorkflowTaskHasAssignableUsersResponses];

export type GetWorkflowTasksAssignedToMePageData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-me';
};

export type GetWorkflowTasksAssignedToMePageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowTasksAssignedToMePageResponse = GetWorkflowTasksAssignedToMePageResponses[keyof GetWorkflowTasksAssignedToMePageResponses];

export type GetWorkflowTasksAssignedToMyRolesPageData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-my-roles';
};

export type GetWorkflowTasksAssignedToMyRolesPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowTasksAssignedToMyRolesPageResponse = GetWorkflowTasksAssignedToMyRolesPageResponses[keyof GetWorkflowTasksAssignedToMyRolesPageResponses];

export type GetWorkflowTasksAssignedToRolePageData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        roleId?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-role';
};

export type GetWorkflowTasksAssignedToRolePageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowTasksAssignedToRolePageResponse = GetWorkflowTasksAssignedToRolePageResponses[keyof GetWorkflowTasksAssignedToRolePageResponses];

export type GetWorkflowTasksAssignedToUserPageData = {
    body?: never;
    path?: never;
    query?: {
        assigneeId?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-user';
};

export type GetWorkflowTasksAssignedToUserPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowTasksAssignedToUserPageResponse = GetWorkflowTasksAssignedToUserPageResponses[keyof GetWorkflowTasksAssignedToUserPageResponses];

export type GetWorkflowTasksAssignedToUserRolesPageData = {
    body?: never;
    path?: never;
    query?: {
        assigneeId?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-user-roles';
};

export type GetWorkflowTasksAssignedToUserRolesPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowTasksAssignedToUserRolesPageResponse = GetWorkflowTasksAssignedToUserRolesPageResponses[keyof GetWorkflowTasksAssignedToUserRolesPageResponses];

export type GetWorkflowTasksSubmittingUserPageData = {
    body?: never;
    path?: never;
    query?: {
        creatorId?: string;
        page?: string;
        pageSize?: string;
        nestedFields?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/submitting-user';
};

export type GetWorkflowTasksSubmittingUserPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type GetWorkflowTasksSubmittingUserPageResponse = GetWorkflowTasksSubmittingUserPageResponses[keyof GetWorkflowTasksSubmittingUserPageResponses];

export type PatchWorkflowTaskAssignToUserData = {
    body?: Array<WorkflowTaskAssignToUser>;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assign-to-user';
};

export type PatchWorkflowTaskAssignToUserResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PatchWorkflowTaskChangeTransitionData = {
    body?: Array<ChangeTransition>;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/change-transition';
};

export type PatchWorkflowTaskChangeTransitionResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PatchWorkflowTaskUpdateDueDateData = {
    body?: Array<WorkflowTaskAssignToMe>;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/update-due-date';
};

export type PatchWorkflowTaskUpdateDueDateResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostWorkflowInstanceWorkflowTasksPageExportBatchData = {
    body?: never;
    path: {
        workflowInstanceId: string;
    };
    query?: {
        completed?: string;
        callbackURL?: string;
        contentType?: string;
        fieldNames?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks/export-batch';
};

export type PostWorkflowInstanceWorkflowTasksPageExportBatchResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostWorkflowTaskAssignToMeData = {
    body?: WorkflowTaskAssignToMe;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assign-to-me';
};

export type PostWorkflowTaskAssignToMeResponses = {
    /**
     * default response
     */
    default: WorkflowTask;
};

export type PostWorkflowTaskAssignToMeResponse = PostWorkflowTaskAssignToMeResponses[keyof PostWorkflowTaskAssignToMeResponses];

export type PostWorkflowTaskAssignToRoleData = {
    body?: WorkflowTaskAssignToRole;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assign-to-role';
};

export type PostWorkflowTaskAssignToRoleResponses = {
    /**
     * default response
     */
    default: WorkflowTask;
};

export type PostWorkflowTaskAssignToRoleResponse = PostWorkflowTaskAssignToRoleResponses[keyof PostWorkflowTaskAssignToRoleResponses];

export type PostWorkflowTaskAssignToUserData = {
    body?: WorkflowTaskAssignToUser;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assign-to-user';
};

export type PostWorkflowTaskAssignToUserResponses = {
    /**
     * default response
     */
    default: WorkflowTask;
};

export type PostWorkflowTaskAssignToUserResponse = PostWorkflowTaskAssignToUserResponses[keyof PostWorkflowTaskAssignToUserResponses];

export type PostWorkflowTaskChangeTransitionData = {
    body?: ChangeTransition;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/change-transition';
};

export type PostWorkflowTaskChangeTransitionResponses = {
    /**
     * default response
     */
    default: WorkflowTask;
};

export type PostWorkflowTaskChangeTransitionResponse = PostWorkflowTaskChangeTransitionResponses[keyof PostWorkflowTaskChangeTransitionResponses];

export type PostWorkflowTaskUpdateDueDateData = {
    body?: WorkflowTaskAssignToMe;
    path: {
        workflowTaskId: string;
    };
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/update-due-date';
};

export type PostWorkflowTaskUpdateDueDateResponses = {
    /**
     * default response
     */
    default: WorkflowTask;
};

export type PostWorkflowTaskUpdateDueDateResponse = PostWorkflowTaskUpdateDueDateResponses[keyof PostWorkflowTaskUpdateDueDateResponses];

export type PostWorkflowTasksPageData = {
    body?: WorkflowTasksBulkSelection;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        sort?: string;
    };
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks';
};

export type PostWorkflowTasksPageResponses = {
    /**
     * default response
     */
    default: PageWorkflowTask;
};

export type PostWorkflowTasksPageResponse = PostWorkflowTasksPageResponses[keyof PostWorkflowTasksPageResponses];

export type PostWorkflowTaskTransitionData = {
    body?: WorkflowTaskIds;
    path?: never;
    query?: never;
    url: '/o/headless-admin-workflow/v1.0/workflow-tasks/next-transitions';
};

export type PostWorkflowTaskTransitionResponses = {
    /**
     * default response
     */
    default: WorkflowTaskTransitions;
};

export type PostWorkflowTaskTransitionResponse = PostWorkflowTaskTransitionResponses[keyof PostWorkflowTaskTransitionResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};
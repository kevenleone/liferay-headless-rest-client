// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetWorkflowTaskAssignableUsersPageData, GetWorkflowTaskAssignableUsersPageResponses, GetWorkflowInstanceNextTransitionsPageData, GetWorkflowInstanceNextTransitionsPageResponses, GetWorkflowTaskNextTransitionsPageData, GetWorkflowTaskNextTransitionsPageResponses, GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageData, GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageResponses, PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkData, PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkResponses, GetWorkflowDefinitionWorkflowDefinitionLinksPageData, GetWorkflowDefinitionWorkflowDefinitionLinksPageResponses, PostWorkflowDefinitionWorkflowDefinitionLinkData, PostWorkflowDefinitionWorkflowDefinitionLinkResponses, PostWorkflowDefinitionWorkflowDefinitionLinkBatchData, PostWorkflowDefinitionWorkflowDefinitionLinkBatchResponses, PostWorkflowDefinitionWorkflowDefinitionLinksPageExportBatchData, PostWorkflowDefinitionWorkflowDefinitionLinksPageExportBatchResponses, PutWorkflowDefinitionLinkByExternalReferenceCodeData, PutWorkflowDefinitionLinkByExternalReferenceCodeResponses, DeleteWorkflowDefinitionData, DeleteWorkflowDefinitionResponses, GetWorkflowDefinitionData, GetWorkflowDefinitionResponses, PutWorkflowDefinitionData, PutWorkflowDefinitionResponses, DeleteWorkflowDefinitionBatchData, DeleteWorkflowDefinitionBatchResponses, PostWorkflowDefinitionBatchData, PostWorkflowDefinitionBatchResponses, PutWorkflowDefinitionBatchData, PutWorkflowDefinitionBatchResponses, DeleteWorkflowDefinitionUndeployData, DeleteWorkflowDefinitionUndeployResponses, GetWorkflowDefinitionByNameData, GetWorkflowDefinitionByNameResponses, GetWorkflowDefinitionsPageData, GetWorkflowDefinitionsPageResponses, PostWorkflowDefinitionData, PostWorkflowDefinitionResponses, PostWorkflowDefinitionDeployData, PostWorkflowDefinitionDeployResponses, PostWorkflowDefinitionSaveData, PostWorkflowDefinitionSaveResponses, PostWorkflowDefinitionUpdateActiveData, PostWorkflowDefinitionUpdateActiveResponses, PostWorkflowDefinitionsPageExportBatchData, PostWorkflowDefinitionsPageExportBatchResponses, DeleteWorkflowInstanceData, DeleteWorkflowInstanceResponses, GetWorkflowInstanceData, GetWorkflowInstanceResponses, DeleteWorkflowInstanceBatchData, DeleteWorkflowInstanceBatchResponses, GetWorkflowInstancesPageData, GetWorkflowInstancesPageResponses, PostWorkflowInstanceChangeTransitionData, PostWorkflowInstanceChangeTransitionResponses, PostWorkflowInstanceSubmitData, PostWorkflowInstanceSubmitResponses, PostWorkflowInstancesPageExportBatchData, PostWorkflowInstancesPageExportBatchResponses, GetWorkflowInstanceWorkflowLogsPageData, GetWorkflowInstanceWorkflowLogsPageResponses, GetWorkflowLogData, GetWorkflowLogResponses, GetWorkflowTaskWorkflowLogsPageData, GetWorkflowTaskWorkflowLogsPageResponses, PostWorkflowInstanceWorkflowLogsPageExportBatchData, PostWorkflowInstanceWorkflowLogsPageExportBatchResponses, PostWorkflowTaskWorkflowLogsPageExportBatchData, PostWorkflowTaskWorkflowLogsPageExportBatchResponses, PostWorkflowTaskAssignableUserData, PostWorkflowTaskAssignableUserResponses, GetWorkflowInstanceWorkflowTasksAssignedToMePageData, GetWorkflowInstanceWorkflowTasksAssignedToMePageResponses, GetWorkflowInstanceWorkflowTasksAssignedToUserPageData, GetWorkflowInstanceWorkflowTasksAssignedToUserPageResponses, GetWorkflowInstanceWorkflowTasksPageData, GetWorkflowInstanceWorkflowTasksPageResponses, GetWorkflowTaskData, GetWorkflowTaskResponses, GetWorkflowTaskHasAssignableUsersData, GetWorkflowTaskHasAssignableUsersResponses, GetWorkflowTasksAssignedToMePageData, GetWorkflowTasksAssignedToMePageResponses, GetWorkflowTasksAssignedToMyRolesPageData, GetWorkflowTasksAssignedToMyRolesPageResponses, GetWorkflowTasksAssignedToRolePageData, GetWorkflowTasksAssignedToRolePageResponses, GetWorkflowTasksAssignedToUserPageData, GetWorkflowTasksAssignedToUserPageResponses, GetWorkflowTasksAssignedToUserRolesPageData, GetWorkflowTasksAssignedToUserRolesPageResponses, GetWorkflowTasksSubmittingUserPageData, GetWorkflowTasksSubmittingUserPageResponses, PatchWorkflowTaskAssignToUserData, PatchWorkflowTaskAssignToUserResponses, PatchWorkflowTaskChangeTransitionData, PatchWorkflowTaskChangeTransitionResponses, PatchWorkflowTaskUpdateDueDateData, PatchWorkflowTaskUpdateDueDateResponses, PostWorkflowInstanceWorkflowTasksPageExportBatchData, PostWorkflowInstanceWorkflowTasksPageExportBatchResponses, PostWorkflowTaskAssignToMeData, PostWorkflowTaskAssignToMeResponses, PostWorkflowTaskAssignToRoleData, PostWorkflowTaskAssignToRoleResponses, PostWorkflowTaskAssignToUserData, PostWorkflowTaskAssignToUserResponses, PostWorkflowTaskChangeTransitionData, PostWorkflowTaskChangeTransitionResponses, PostWorkflowTaskUpdateDueDateData, PostWorkflowTaskUpdateDueDateResponses, PostWorkflowTasksPageData, PostWorkflowTasksPageResponses, PostWorkflowTaskTransitionData, PostWorkflowTaskTransitionResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getWorkflowTaskAssignableUsersPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowTaskAssignableUsersPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowTaskAssignableUsersPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assignable-users',
        ...options
    });
};

export const getWorkflowInstanceNextTransitionsPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowInstanceNextTransitionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowInstanceNextTransitionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/next-transitions',
        ...options
    });
};

export const getWorkflowTaskNextTransitionsPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowTaskNextTransitionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowTaskNextTransitionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/next-transitions',
        ...options
    });
};

export const getWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinksPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/by-external-reference-code/{externalReferenceCode}/workflow-definition-links',
        ...options
    });
};

export const postWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLink = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowDefinitionByExternalReferenceCodeWorkflowDefinitionLinkResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/by-external-reference-code/{externalReferenceCode}/workflow-definition-links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getWorkflowDefinitionWorkflowDefinitionLinksPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowDefinitionWorkflowDefinitionLinksPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowDefinitionWorkflowDefinitionLinksPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links',
        ...options
    });
};

export const postWorkflowDefinitionWorkflowDefinitionLink = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowDefinitionWorkflowDefinitionLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowDefinitionWorkflowDefinitionLinkResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowDefinitionWorkflowDefinitionLinkBatch = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowDefinitionWorkflowDefinitionLinkBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowDefinitionWorkflowDefinitionLinkBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowDefinitionWorkflowDefinitionLinksPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowDefinitionWorkflowDefinitionLinksPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowDefinitionWorkflowDefinitionLinksPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}/workflow-definition-links/export-batch',
        ...options
    });
};

export const putWorkflowDefinitionLinkByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowDefinitionLinkByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkflowDefinitionLinkByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definition-links/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteWorkflowDefinition = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowDefinitionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkflowDefinitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}',
        ...options
    });
};

export const getWorkflowDefinition = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowDefinitionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowDefinitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}',
        ...options
    });
};

export const putWorkflowDefinition = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowDefinitionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkflowDefinitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/{workflowDefinitionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteWorkflowDefinitionBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteWorkflowDefinitionBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteWorkflowDefinitionBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowDefinitionBatch = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowDefinitionBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowDefinitionBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putWorkflowDefinitionBatch = <ThrowOnError extends boolean = false>(options?: Options<PutWorkflowDefinitionBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutWorkflowDefinitionBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteWorkflowDefinitionUndeploy = <ThrowOnError extends boolean = false>(options?: Options<DeleteWorkflowDefinitionUndeployData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteWorkflowDefinitionUndeployResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/undeploy',
        ...options
    });
};

export const getWorkflowDefinitionByName = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowDefinitionByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowDefinitionByNameResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/by-name/{name}',
        ...options
    });
};

export const getWorkflowDefinitionsPage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowDefinitionsPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowDefinitionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions',
        ...options
    });
};

export const postWorkflowDefinition = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowDefinitionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowDefinitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowDefinitionDeploy = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowDefinitionDeployData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowDefinitionDeployResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowDefinitionSave = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowDefinitionSaveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowDefinitionSaveResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowDefinitionUpdateActive = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowDefinitionUpdateActiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowDefinitionUpdateActiveResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/update-active',
        ...options
    });
};

export const postWorkflowDefinitionsPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowDefinitionsPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowDefinitionsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-definitions/export-batch',
        ...options
    });
};

export const deleteWorkflowInstance = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkflowInstanceResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}',
        ...options
    });
};

export const getWorkflowInstance = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowInstanceResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}',
        ...options
    });
};

export const deleteWorkflowInstanceBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteWorkflowInstanceBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteWorkflowInstanceBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getWorkflowInstancesPage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowInstancesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowInstancesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances',
        ...options
    });
};

export const postWorkflowInstanceChangeTransition = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowInstanceChangeTransitionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowInstanceChangeTransitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/change-transition',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowInstanceSubmit = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowInstanceSubmitData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowInstanceSubmitResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/submit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowInstancesPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowInstancesPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowInstancesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/export-batch',
        ...options
    });
};

export const getWorkflowInstanceWorkflowLogsPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowInstanceWorkflowLogsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowInstanceWorkflowLogsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-logs',
        ...options
    });
};

export const getWorkflowLog = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowLogResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-logs/{workflowLogId}',
        ...options
    });
};

export const getWorkflowTaskWorkflowLogsPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowTaskWorkflowLogsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowTaskWorkflowLogsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/workflow-logs',
        ...options
    });
};

export const postWorkflowInstanceWorkflowLogsPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowInstanceWorkflowLogsPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowInstanceWorkflowLogsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-logs/export-batch',
        ...options
    });
};

export const postWorkflowTaskWorkflowLogsPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowTaskWorkflowLogsPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowTaskWorkflowLogsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/workflow-logs/export-batch',
        ...options
    });
};

export const postWorkflowTaskAssignableUser = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowTaskAssignableUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowTaskAssignableUserResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assignable-users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getWorkflowInstanceWorkflowTasksAssignedToMePage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowInstanceWorkflowTasksAssignedToMePageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowInstanceWorkflowTasksAssignedToMePageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks/assigned-to-me',
        ...options
    });
};

export const getWorkflowInstanceWorkflowTasksAssignedToUserPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowInstanceWorkflowTasksAssignedToUserPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowInstanceWorkflowTasksAssignedToUserPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks/assigned-to-user',
        ...options
    });
};

export const getWorkflowInstanceWorkflowTasksPage = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowInstanceWorkflowTasksPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowInstanceWorkflowTasksPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks',
        ...options
    });
};

export const getWorkflowTask = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowTaskResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}',
        ...options
    });
};

export const getWorkflowTaskHasAssignableUsers = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowTaskHasAssignableUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowTaskHasAssignableUsersResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/has-assignable-users',
        ...options
    });
};

export const getWorkflowTasksAssignedToMePage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTasksAssignedToMePageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTasksAssignedToMePageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-me',
        ...options
    });
};

export const getWorkflowTasksAssignedToMyRolesPage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTasksAssignedToMyRolesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTasksAssignedToMyRolesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-my-roles',
        ...options
    });
};

export const getWorkflowTasksAssignedToRolePage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTasksAssignedToRolePageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTasksAssignedToRolePageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-role',
        ...options
    });
};

export const getWorkflowTasksAssignedToUserPage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTasksAssignedToUserPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTasksAssignedToUserPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-user',
        ...options
    });
};

export const getWorkflowTasksAssignedToUserRolesPage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTasksAssignedToUserRolesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTasksAssignedToUserRolesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assigned-to-user-roles',
        ...options
    });
};

export const getWorkflowTasksSubmittingUserPage = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTasksSubmittingUserPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTasksSubmittingUserPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/submitting-user',
        ...options
    });
};

export const patchWorkflowTaskAssignToUser = <ThrowOnError extends boolean = false>(options?: Options<PatchWorkflowTaskAssignToUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchWorkflowTaskAssignToUserResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/assign-to-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const patchWorkflowTaskChangeTransition = <ThrowOnError extends boolean = false>(options?: Options<PatchWorkflowTaskChangeTransitionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchWorkflowTaskChangeTransitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/change-transition',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const patchWorkflowTaskUpdateDueDate = <ThrowOnError extends boolean = false>(options?: Options<PatchWorkflowTaskUpdateDueDateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchWorkflowTaskUpdateDueDateResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/update-due-date',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowInstanceWorkflowTasksPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowInstanceWorkflowTasksPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowInstanceWorkflowTasksPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-instances/{workflowInstanceId}/workflow-tasks/export-batch',
        ...options
    });
};

export const postWorkflowTaskAssignToMe = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowTaskAssignToMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowTaskAssignToMeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assign-to-me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowTaskAssignToRole = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowTaskAssignToRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowTaskAssignToRoleResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assign-to-role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowTaskAssignToUser = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowTaskAssignToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowTaskAssignToUserResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/assign-to-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowTaskChangeTransition = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowTaskChangeTransitionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowTaskChangeTransitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/change-transition',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowTaskUpdateDueDate = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowTaskUpdateDueDateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowTaskUpdateDueDateResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/{workflowTaskId}/update-due-date',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postWorkflowTasksPage = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowTasksPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowTasksPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postWorkflowTaskTransition = <ThrowOnError extends boolean = false>(options?: Options<PostWorkflowTaskTransitionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkflowTaskTransitionResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-workflow/v1.0/workflow-tasks/next-transitions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
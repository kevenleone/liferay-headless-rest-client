// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteAssetLibraryKeywordByExternalReferenceCodeData, DeleteAssetLibraryKeywordByExternalReferenceCodeResponses, GetAssetLibraryKeywordByExternalReferenceCodeData, GetAssetLibraryKeywordByExternalReferenceCodeResponses, PutAssetLibraryKeywordByExternalReferenceCodeData, PutAssetLibraryKeywordByExternalReferenceCodeResponses, DeleteKeywordData, DeleteKeywordResponses, GetKeywordData, GetKeywordResponses, PutKeywordData, PutKeywordResponses, DeleteKeywordBatchData, DeleteKeywordBatchResponses, PostKeywordBatchData, PostKeywordBatchResponses, PutKeywordBatchData, PutKeywordBatchResponses, DeleteSiteKeywordByExternalReferenceCodeData, DeleteSiteKeywordByExternalReferenceCodeResponses, GetSiteKeywordByExternalReferenceCodeData, GetSiteKeywordByExternalReferenceCodeResponses, PutSiteKeywordByExternalReferenceCodeData, PutSiteKeywordByExternalReferenceCodeResponses, GetAssetLibraryKeywordPermissionsPageData, GetAssetLibraryKeywordPermissionsPageResponses, PutAssetLibraryKeywordPermissionsPageData, PutAssetLibraryKeywordPermissionsPageResponses, GetAssetLibraryKeywordsPageData, GetAssetLibraryKeywordsPageResponses, PostAssetLibraryKeywordData, PostAssetLibraryKeywordResponses, GetKeywordsPageData, GetKeywordsPageResponses, PostKeywordData, PostKeywordResponses, GetKeywordsRankedPageData, GetKeywordsRankedPageResponses, GetSiteKeywordPermissionsPageData, GetSiteKeywordPermissionsPageResponses, PutSiteKeywordPermissionsPageData, PutSiteKeywordPermissionsPageResponses, GetSiteKeywordsPageData, GetSiteKeywordsPageResponses, PostSiteKeywordData, PostSiteKeywordResponses, PostAssetLibraryKeywordBatchData, PostAssetLibraryKeywordBatchResponses, PostAssetLibraryKeywordsPageExportBatchData, PostAssetLibraryKeywordsPageExportBatchResponses, PostKeywordsPageExportBatchData, PostKeywordsPageExportBatchResponses, PostSiteKeywordBatchData, PostSiteKeywordBatchResponses, PostSiteKeywordsPageExportBatchData, PostSiteKeywordsPageExportBatchResponses, PutKeywordMergeData, PutKeywordMergeResponses, PutKeywordSubscribeData, PutKeywordSubscribeResponses, PutKeywordUnsubscribeData, PutKeywordUnsubscribeResponses, DeleteAssetLibraryTaxonomyCategoryByExternalReferenceCodeData, DeleteAssetLibraryTaxonomyCategoryByExternalReferenceCodeResponses, GetAssetLibraryTaxonomyCategoryByExternalReferenceCodeData, GetAssetLibraryTaxonomyCategoryByExternalReferenceCodeResponses, PutAssetLibraryTaxonomyCategoryByExternalReferenceCodeData, PutAssetLibraryTaxonomyCategoryByExternalReferenceCodeResponses, DeleteSiteTaxonomyCategoryByExternalReferenceCodeData, DeleteSiteTaxonomyCategoryByExternalReferenceCodeResponses, GetSiteTaxonomyCategoryByExternalReferenceCodeData, GetSiteTaxonomyCategoryByExternalReferenceCodeResponses, PutSiteTaxonomyCategoryByExternalReferenceCodeData, PutSiteTaxonomyCategoryByExternalReferenceCodeResponses, DeleteTaxonomyCategoryData, DeleteTaxonomyCategoryResponses, GetTaxonomyCategoryData, GetTaxonomyCategoryResponses, PatchTaxonomyCategoryData, PatchTaxonomyCategoryResponses, PutTaxonomyCategoryData, PutTaxonomyCategoryResponses, DeleteTaxonomyCategoryBatchData, DeleteTaxonomyCategoryBatchResponses, PutTaxonomyCategoryBatchData, PutTaxonomyCategoryBatchResponses, DeleteTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeData, DeleteTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeResponses, GetTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeData, GetTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeResponses, PutTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeData, PutTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeResponses, GetAssetLibraryTaxonomyCategoriesPageData, GetAssetLibraryTaxonomyCategoriesPageResponses, PostAssetLibraryTaxonomyCategoryData, PostAssetLibraryTaxonomyCategoryResponses, GetSiteTaxonomyCategoriesPageData, GetSiteTaxonomyCategoriesPageResponses, PostSiteTaxonomyCategoryData, PostSiteTaxonomyCategoryResponses, GetTaxonomyCategoriesRankedPageData, GetTaxonomyCategoriesRankedPageResponses, GetTaxonomyCategoryPermissionsPageData, GetTaxonomyCategoryPermissionsPageResponses, PutTaxonomyCategoryPermissionsPageData, PutTaxonomyCategoryPermissionsPageResponses, GetTaxonomyCategoryTaxonomyCategoriesPageData, GetTaxonomyCategoryTaxonomyCategoriesPageResponses, PostTaxonomyCategoryTaxonomyCategoryData, PostTaxonomyCategoryTaxonomyCategoryResponses, GetTaxonomyVocabularyTaxonomyCategoriesPageData, GetTaxonomyVocabularyTaxonomyCategoriesPageResponses, PostTaxonomyVocabularyTaxonomyCategoryData, PostTaxonomyVocabularyTaxonomyCategoryResponses, PostAssetLibraryTaxonomyCategoriesPageExportBatchData, PostAssetLibraryTaxonomyCategoriesPageExportBatchResponses, PostAssetLibraryTaxonomyCategoryBatchData, PostAssetLibraryTaxonomyCategoryBatchResponses, PostSiteTaxonomyCategoriesPageExportBatchData, PostSiteTaxonomyCategoriesPageExportBatchResponses, PostSiteTaxonomyCategoryBatchData, PostSiteTaxonomyCategoryBatchResponses, PostTaxonomyVocabularyTaxonomyCategoriesPageExportBatchData, PostTaxonomyVocabularyTaxonomyCategoriesPageExportBatchResponses, PostTaxonomyVocabularyTaxonomyCategoryBatchData, PostTaxonomyVocabularyTaxonomyCategoryBatchResponses, DeleteAssetLibraryTaxonomyVocabularyByExternalReferenceCodeData, DeleteAssetLibraryTaxonomyVocabularyByExternalReferenceCodeResponses, GetAssetLibraryTaxonomyVocabularyByExternalReferenceCodeData, GetAssetLibraryTaxonomyVocabularyByExternalReferenceCodeResponses, PutAssetLibraryTaxonomyVocabularyByExternalReferenceCodeData, PutAssetLibraryTaxonomyVocabularyByExternalReferenceCodeResponses, DeleteSiteTaxonomyVocabularyByExternalReferenceCodeData, DeleteSiteTaxonomyVocabularyByExternalReferenceCodeResponses, GetSiteTaxonomyVocabularyByExternalReferenceCodeData, GetSiteTaxonomyVocabularyByExternalReferenceCodeResponses, PutSiteTaxonomyVocabularyByExternalReferenceCodeData, PutSiteTaxonomyVocabularyByExternalReferenceCodeResponses, DeleteTaxonomyVocabularyData, DeleteTaxonomyVocabularyResponses, GetTaxonomyVocabularyData, GetTaxonomyVocabularyResponses, PatchTaxonomyVocabularyData, PatchTaxonomyVocabularyResponses, PutTaxonomyVocabularyData, PutTaxonomyVocabularyResponses, DeleteTaxonomyVocabularyBatchData, DeleteTaxonomyVocabularyBatchResponses, PostTaxonomyVocabularyBatchData, PostTaxonomyVocabularyBatchResponses, PutTaxonomyVocabularyBatchData, PutTaxonomyVocabularyBatchResponses, GetAssetLibraryTaxonomyVocabulariesPageData, GetAssetLibraryTaxonomyVocabulariesPageResponses, PostAssetLibraryTaxonomyVocabularyData, PostAssetLibraryTaxonomyVocabularyResponses, GetAssetLibraryTaxonomyVocabularyPermissionsPageData, GetAssetLibraryTaxonomyVocabularyPermissionsPageResponses, PutAssetLibraryTaxonomyVocabularyPermissionsPageData, PutAssetLibraryTaxonomyVocabularyPermissionsPageResponses, GetSiteTaxonomyVocabulariesPageData, GetSiteTaxonomyVocabulariesPageResponses, PostSiteTaxonomyVocabularyData, PostSiteTaxonomyVocabularyResponses, GetSiteTaxonomyVocabularyPermissionsPageData, GetSiteTaxonomyVocabularyPermissionsPageResponses, PutSiteTaxonomyVocabularyPermissionsPageData, PutSiteTaxonomyVocabularyPermissionsPageResponses, GetTaxonomyVocabulariesPageData, GetTaxonomyVocabulariesPageResponses, PostTaxonomyVocabularyData, PostTaxonomyVocabularyResponses, GetTaxonomyVocabularyPermissionsPageData, GetTaxonomyVocabularyPermissionsPageResponses, PutTaxonomyVocabularyPermissionsPageData, PutTaxonomyVocabularyPermissionsPageResponses, PostAssetLibraryTaxonomyVocabulariesPageExportBatchData, PostAssetLibraryTaxonomyVocabulariesPageExportBatchResponses, PostAssetLibraryTaxonomyVocabularyBatchData, PostAssetLibraryTaxonomyVocabularyBatchResponses, PostSiteTaxonomyVocabulariesPageExportBatchData, PostSiteTaxonomyVocabulariesPageExportBatchResponses, PostSiteTaxonomyVocabularyBatchData, PostSiteTaxonomyVocabularyBatchResponses, PostTaxonomyVocabulariesPageExportBatchData, PostTaxonomyVocabulariesPageExportBatchResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Deletes the asset library's keyword by external reference code.
 */
export const deleteAssetLibraryKeywordByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetLibraryKeywordByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssetLibraryKeywordByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the asset library's keyword by external reference code.
 */
export const getAssetLibraryKeywordByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryKeywordByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryKeywordByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the asset library's keyword with the given external reference code, or creates it if it not exists.
 */
export const putAssetLibraryKeywordByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutAssetLibraryKeywordByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAssetLibraryKeywordByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the keyword and returns a 204 if the operation succeeds.
 */
export const deleteKeyword = <ThrowOnError extends boolean = false>(options: Options<DeleteKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteKeywordResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/{keywordId}',
        ...options
    });
};

/**
 * Retrieves a keyword.
 */
export const getKeyword = <ThrowOnError extends boolean = false>(options: Options<GetKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKeywordResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/{keywordId}',
        ...options
    });
};

/**
 * Replaces the keyword with the information sent in the request body. Any missing fields are deleted, unless required.
 */
export const putKeyword = <ThrowOnError extends boolean = false>(options: Options<PutKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutKeywordResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/{keywordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteKeywordBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteKeywordBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteKeywordBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postKeywordBatch = <ThrowOnError extends boolean = false>(options?: Options<PostKeywordBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostKeywordBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putKeywordBatch = <ThrowOnError extends boolean = false>(options?: Options<PutKeywordBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutKeywordBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes the site's keyword by external reference code.
 */
export const deleteSiteKeywordByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteSiteKeywordByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSiteKeywordByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the site's keyword by external reference code.
 */
export const getSiteKeywordByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetSiteKeywordByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteKeywordByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the site's keyword with the given external reference code, or creates it if it not exists.
 */
export const putSiteKeywordByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutSiteKeywordByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSiteKeywordByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAssetLibraryKeywordPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryKeywordPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryKeywordPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/permissions',
        ...options
    });
};

export const putAssetLibraryKeywordPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<PutAssetLibraryKeywordPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAssetLibraryKeywordPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAssetLibraryKeywordsPage = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryKeywordsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryKeywordsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords',
        ...options
    });
};

export const postAssetLibraryKeyword = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryKeywordResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getKeywordsPage = <ThrowOnError extends boolean = false>(options?: Options<GetKeywordsPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeywordsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords',
        ...options
    });
};

export const postKeyword = <ThrowOnError extends boolean = false>(options?: Options<PostKeywordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostKeywordResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getKeywordsRankedPage = <ThrowOnError extends boolean = false>(options?: Options<GetKeywordsRankedPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeywordsRankedPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/ranked',
        ...options
    });
};

export const getSiteKeywordPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<GetSiteKeywordPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteKeywordPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/permissions',
        ...options
    });
};

export const putSiteKeywordPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<PutSiteKeywordPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSiteKeywordPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a Site's keywords. Results can be paginated, filtered, searched, and sorted.
 */
export const getSiteKeywordsPage = <ThrowOnError extends boolean = false>(options: Options<GetSiteKeywordsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteKeywordsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords',
        ...options
    });
};

/**
 * Inserts a new keyword in a Site.
 */
export const postSiteKeyword = <ThrowOnError extends boolean = false>(options: Options<PostSiteKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteKeywordResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAssetLibraryKeywordBatch = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryKeywordBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryKeywordBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAssetLibraryKeywordsPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryKeywordsPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryKeywordsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/keywords/export-batch',
        ...options
    });
};

export const postKeywordsPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostKeywordsPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostKeywordsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/export-batch',
        ...options
    });
};

export const postSiteKeywordBatch = <ThrowOnError extends boolean = false>(options: Options<PostSiteKeywordBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteKeywordBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postSiteKeywordsPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostSiteKeywordsPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteKeywordsPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/keywords/export-batch',
        ...options
    });
};

export const putKeywordMerge = <ThrowOnError extends boolean = false>(options: Options<PutKeywordMergeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutKeywordMergeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/{toKeywordId}/merge',
        ...options
    });
};

export const putKeywordSubscribe = <ThrowOnError extends boolean = false>(options: Options<PutKeywordSubscribeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutKeywordSubscribeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/{keywordId}/subscribe',
        ...options
    });
};

export const putKeywordUnsubscribe = <ThrowOnError extends boolean = false>(options: Options<PutKeywordUnsubscribeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutKeywordUnsubscribeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/keywords/{keywordId}/unsubscribe',
        ...options
    });
};

/**
 * Deletes the asset library's taxonomy category by external reference code.
 */
export const deleteAssetLibraryTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetLibraryTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssetLibraryTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the asset library's taxonomy category by external reference code.
 */
export const getAssetLibraryTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the asset library's taxonomy category with the given external reference code, or creates it if it not exists.
 */
export const putAssetLibraryTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutAssetLibraryTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAssetLibraryTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the site's taxonomy category by external reference code.
 */
export const deleteSiteTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteSiteTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSiteTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the site's taxonomy category by external reference code.
 */
export const getSiteTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetSiteTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the site's taxonomy category with the given external reference code, or creates it if it not exists.
 */
export const putSiteTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutSiteTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSiteTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the taxonomy category and returns a 204 if the operation succeeds.
 */
export const deleteTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{taxonomyCategoryId}',
        ...options
    });
};

/**
 * Retrieves a taxonomy category.
 */
export const getTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{taxonomyCategoryId}',
        ...options
    });
};

/**
 * Updates only the fields received in the request body. Other fields are left untouched.
 */
export const patchTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<PatchTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{taxonomyCategoryId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Replaces the taxonomy category with the information sent in the request body. Any missing fields are deleted unless they are required.
 */
export const putTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<PutTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{taxonomyCategoryId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTaxonomyCategoryBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteTaxonomyCategoryBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTaxonomyCategoryBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putTaxonomyCategoryBatch = <ThrowOnError extends boolean = false>(options?: Options<PutTaxonomyCategoryBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTaxonomyCategoryBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes the site's taxonomy category by external reference code.
 */
export const deleteTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the site's taxonomy category by external reference code.
 */
export const getTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the site's taxonomy category with the given external reference code, or creates it if it not exists.
 */
export const putTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the asset library's taxonomy categories.
 */
export const getAssetLibraryTaxonomyCategoriesPage = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryTaxonomyCategoriesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryTaxonomyCategoriesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories',
        ...options
    });
};

/**
 * Inserts a new Category in a Scope.
 */
export const postAssetLibraryTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the site's taxonomy categories.
 */
export const getSiteTaxonomyCategoriesPage = <ThrowOnError extends boolean = false>(options: Options<GetSiteTaxonomyCategoriesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteTaxonomyCategoriesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories',
        ...options
    });
};

/**
 * Inserts a new Category in a Scope.
 */
export const postSiteTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<PostSiteTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTaxonomyCategoriesRankedPage = <ThrowOnError extends boolean = false>(options?: Options<GetTaxonomyCategoriesRankedPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTaxonomyCategoriesRankedPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/ranked',
        ...options
    });
};

export const getTaxonomyCategoryPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyCategoryPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyCategoryPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{taxonomyCategoryId}/permissions',
        ...options
    });
};

export const putTaxonomyCategoryPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<PutTaxonomyCategoryPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTaxonomyCategoryPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{taxonomyCategoryId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a taxonomy category's child taxonomy categories. Results can be paginated, filtered, searched, and sorted.
 */
export const getTaxonomyCategoryTaxonomyCategoriesPage = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyCategoryTaxonomyCategoriesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyCategoryTaxonomyCategoriesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{parentTaxonomyCategoryId}/taxonomy-categories',
        ...options
    });
};

/**
 * Inserts a new child taxonomy category.
 */
export const postTaxonomyCategoryTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<PostTaxonomyCategoryTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTaxonomyCategoryTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-categories/{parentTaxonomyCategoryId}/taxonomy-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a vocabulary's taxonomy categories. Results can be paginated, filtered, searched, and sorted.
 */
export const getTaxonomyVocabularyTaxonomyCategoriesPage = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyVocabularyTaxonomyCategoriesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyVocabularyTaxonomyCategoriesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories',
        ...options
    });
};

/**
 * Inserts a new taxonomy category in a taxonomy vocabulary.
 */
export const postTaxonomyVocabularyTaxonomyCategory = <ThrowOnError extends boolean = false>(options: Options<PostTaxonomyVocabularyTaxonomyCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTaxonomyVocabularyTaxonomyCategoryResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAssetLibraryTaxonomyCategoriesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryTaxonomyCategoriesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryTaxonomyCategoriesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories/export-batch',
        ...options
    });
};

export const postAssetLibraryTaxonomyCategoryBatch = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryTaxonomyCategoryBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryTaxonomyCategoryBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-categories/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postSiteTaxonomyCategoriesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostSiteTaxonomyCategoriesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteTaxonomyCategoriesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories/export-batch',
        ...options
    });
};

export const postSiteTaxonomyCategoryBatch = <ThrowOnError extends boolean = false>(options: Options<PostSiteTaxonomyCategoryBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteTaxonomyCategoryBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-categories/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTaxonomyVocabularyTaxonomyCategoriesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostTaxonomyVocabularyTaxonomyCategoriesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTaxonomyVocabularyTaxonomyCategoriesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories/export-batch',
        ...options
    });
};

export const postTaxonomyVocabularyTaxonomyCategoryBatch = <ThrowOnError extends boolean = false>(options: Options<PostTaxonomyVocabularyTaxonomyCategoryBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTaxonomyVocabularyTaxonomyCategoryBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the asset library's taxonomy vocabulary by external reference code.
 */
export const deleteAssetLibraryTaxonomyVocabularyByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetLibraryTaxonomyVocabularyByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssetLibraryTaxonomyVocabularyByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the asset library's taxonomy vocabulary by external reference code.
 */
export const getAssetLibraryTaxonomyVocabularyByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryTaxonomyVocabularyByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryTaxonomyVocabularyByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the asset library's taxonomy vocabulary with the given external reference code, or creates it if it not exists.
 */
export const putAssetLibraryTaxonomyVocabularyByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutAssetLibraryTaxonomyVocabularyByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAssetLibraryTaxonomyVocabularyByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the site's taxonomy vocabulary by external reference code.
 */
export const deleteSiteTaxonomyVocabularyByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<DeleteSiteTaxonomyVocabularyByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSiteTaxonomyVocabularyByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Retrieves the site's taxonomy vocabulary by external reference code.
 */
export const getSiteTaxonomyVocabularyByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<GetSiteTaxonomyVocabularyByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteTaxonomyVocabularyByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}',
        ...options
    });
};

/**
 * Updates the site's taxonomy vocabulary with the given external reference code, or creates it if it not exists.
 */
export const putSiteTaxonomyVocabularyByExternalReferenceCode = <ThrowOnError extends boolean = false>(options: Options<PutSiteTaxonomyVocabularyByExternalReferenceCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSiteTaxonomyVocabularyByExternalReferenceCodeResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the taxonomy vocabulary and returns a 204 if the operation succeeds.
 */
export const deleteTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options: Options<DeleteTaxonomyVocabularyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}',
        ...options
    });
};

/**
 * Retrieves a taxonomy vocabulary.
 */
export const getTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyVocabularyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}',
        ...options
    });
};

/**
 * Updates only the fields received in the request body. Any other fields are left untouched.
 */
export const patchTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options: Options<PatchTaxonomyVocabularyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Replaces the taxonomy vocabulary with the information sent in the request body. Any missing fields are deleted unless they are required.
 */
export const putTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options: Options<PutTaxonomyVocabularyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTaxonomyVocabularyBatch = <ThrowOnError extends boolean = false>(options?: Options<DeleteTaxonomyVocabularyBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTaxonomyVocabularyBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postTaxonomyVocabularyBatch = <ThrowOnError extends boolean = false>(options?: Options<PostTaxonomyVocabularyBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTaxonomyVocabularyBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putTaxonomyVocabularyBatch = <ThrowOnError extends boolean = false>(options?: Options<PutTaxonomyVocabularyBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTaxonomyVocabularyBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAssetLibraryTaxonomyVocabulariesPage = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryTaxonomyVocabulariesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryTaxonomyVocabulariesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies',
        ...options
    });
};

export const postAssetLibraryTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryTaxonomyVocabularyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAssetLibraryTaxonomyVocabularyPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<GetAssetLibraryTaxonomyVocabularyPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetLibraryTaxonomyVocabularyPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/permissions',
        ...options
    });
};

export const putAssetLibraryTaxonomyVocabularyPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<PutAssetLibraryTaxonomyVocabularyPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAssetLibraryTaxonomyVocabularyPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves a Site's taxonomy vocabularies. Results can be paginated, filtered, searched, and sorted.
 */
export const getSiteTaxonomyVocabulariesPage = <ThrowOnError extends boolean = false>(options: Options<GetSiteTaxonomyVocabulariesPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteTaxonomyVocabulariesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies',
        ...options
    });
};

/**
 * Inserts a new taxonomy vocabulary in a Site.
 */
export const postSiteTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options: Options<PostSiteTaxonomyVocabularyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getSiteTaxonomyVocabularyPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<GetSiteTaxonomyVocabularyPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSiteTaxonomyVocabularyPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/permissions',
        ...options
    });
};

export const putSiteTaxonomyVocabularyPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<PutSiteTaxonomyVocabularyPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSiteTaxonomyVocabularyPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all taxonomy vocabularies that were created in CMS. Does not retrieve vocabularies created in DXP. CMS vocabularies are distinguished by having a `groupId = 0`.
 */
export const getTaxonomyVocabulariesPage = <ThrowOnError extends boolean = false>(options?: Options<GetTaxonomyVocabulariesPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTaxonomyVocabulariesPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies',
        ...options
    });
};

/**
 * Creates the asset library's taxonomy vocabulary in the given spaces.
 */
export const postTaxonomyVocabulary = <ThrowOnError extends boolean = false>(options?: Options<PostTaxonomyVocabularyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTaxonomyVocabularyResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTaxonomyVocabularyPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyVocabularyPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyVocabularyPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/permissions',
        ...options
    });
};

export const putTaxonomyVocabularyPermissionsPage = <ThrowOnError extends boolean = false>(options: Options<PutTaxonomyVocabularyPermissionsPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTaxonomyVocabularyPermissionsPageResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/{taxonomyVocabularyId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAssetLibraryTaxonomyVocabulariesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryTaxonomyVocabulariesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryTaxonomyVocabulariesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/export-batch',
        ...options
    });
};

export const postAssetLibraryTaxonomyVocabularyBatch = <ThrowOnError extends boolean = false>(options: Options<PostAssetLibraryTaxonomyVocabularyBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAssetLibraryTaxonomyVocabularyBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postSiteTaxonomyVocabulariesPageExportBatch = <ThrowOnError extends boolean = false>(options: Options<PostSiteTaxonomyVocabulariesPageExportBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteTaxonomyVocabulariesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/export-batch',
        ...options
    });
};

export const postSiteTaxonomyVocabularyBatch = <ThrowOnError extends boolean = false>(options: Options<PostSiteTaxonomyVocabularyBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSiteTaxonomyVocabularyBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/sites/{siteId}/taxonomy-vocabularies/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTaxonomyVocabulariesPageExportBatch = <ThrowOnError extends boolean = false>(options?: Options<PostTaxonomyVocabulariesPageExportBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTaxonomyVocabulariesPageExportBatchResponses, unknown, ThrowOnError>({
        url: '/o/headless-admin-taxonomy/v1.0/taxonomy-vocabularies/export-batch',
        ...options
    });
};
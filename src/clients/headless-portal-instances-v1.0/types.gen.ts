// This file is auto-generated by @hey-api/openapi-ts

export type Admin = {
    /**
     * Administrator's email address.
     */
    emailAddress?: string;
    /**
     * The admin's surname (last name).
     */
    familyName?: string;
    /**
     * The admin's first name.
     */
    givenName?: string;
    readonly 'x-class-name'?: string;
};

export type PortalInstance = {
    readonly active?: boolean;
    admin?: Admin;
    /**
     * internal unique key.
     */
    companyId?: number;
    /**
     * domain used for email authentication.
     */
    domain?: string;
    /**
     * public unique key (corresponds to company's webId field)
     */
    portalInstanceId?: string;
    siteInitializerKey?: string;
    virtualHost?: string;
    readonly 'x-class-name'?: string;
};

export type Facet = {
    facetCriteria?: string;
    facetValues?: Array<FacetValue>;
};

export type FacetValue = {
    numberOfOccurrences?: number;
    term?: string;
};

export type PagePortalInstance = {
    lastPage?: number;
    totalCount?: number;
    items?: Array<PortalInstance>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type DeletePortalInstanceData = {
    body?: never;
    path: {
        portalInstanceId: string;
    };
    query?: never;
    url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}';
};

export type DeletePortalInstanceResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetPortalInstanceData = {
    body?: never;
    path: {
        portalInstanceId: string;
    };
    query?: never;
    url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}';
};

export type GetPortalInstanceResponses = {
    /**
     * default response
     */
    default: PortalInstance;
};

export type GetPortalInstanceResponse = GetPortalInstanceResponses[keyof GetPortalInstanceResponses];

export type PatchPortalInstanceData = {
    body?: PortalInstance;
    path: {
        portalInstanceId: string;
    };
    query?: never;
    url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}';
};

export type PatchPortalInstanceResponses = {
    /**
     * default response
     */
    default: PortalInstance;
};

export type PatchPortalInstanceResponse = PatchPortalInstanceResponses[keyof PatchPortalInstanceResponses];

export type GetPortalInstancesPageData = {
    body?: never;
    path?: never;
    query?: {
        skipDefault?: string;
        nestedFields?: string;
    };
    url: '/o/headless-portal-instances/v1.0/portal-instances';
};

export type GetPortalInstancesPageResponses = {
    /**
     * default response
     */
    default: PagePortalInstance;
};

export type GetPortalInstancesPageResponse = GetPortalInstancesPageResponses[keyof GetPortalInstancesPageResponses];

export type PostPortalInstanceData = {
    body?: PortalInstance;
    path?: never;
    query?: never;
    url: '/o/headless-portal-instances/v1.0/portal-instances';
};

export type PostPortalInstanceResponses = {
    /**
     * default response
     */
    default: PortalInstance;
};

export type PostPortalInstanceResponse = PostPortalInstanceResponses[keyof PostPortalInstanceResponses];

export type PutPortalInstanceActivateData = {
    body?: never;
    path: {
        portalInstanceId: string;
    };
    query?: never;
    url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}/activate';
};

export type PutPortalInstanceActivateResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PutPortalInstanceDeactivateData = {
    body?: never;
    path: {
        portalInstanceId: string;
    };
    query?: never;
    url: '/o/headless-portal-instances/v1.0/portal-instances/{portalInstanceId}/deactivate';
};

export type PutPortalInstanceDeactivateResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};
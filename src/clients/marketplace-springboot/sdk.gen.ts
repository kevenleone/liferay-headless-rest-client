// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostProvisioningData, PostProvisioningResponses, PostProvisioningOrderData, PostProvisioningOrderResponses, PostNotifyEndData, PostNotifyEndResponses, PostExpireData, PostExpireResponses, PostLicenseKeysData, PostLicenseKeysResponses, DeactivateLicenseKeysData, DeactivateLicenseKeysResponses, PostProductSubmitData, PostProductSubmitResponses, PostProductPurchaseData, PostProductPurchaseResponses, GetProjectsKpiData, GetProjectsKpiResponses, PostKpiData, PostKpiResponses, PostProductData, PostProductResponses, PostProvisioning1Data, PostProvisioning1Responses, UninstallAppData, UninstallAppResponses, PostProvisioning2Data, PostProvisioning2Responses, PostProvisioning3Data, PostProvisioning3Responses, GetAvailabilityData, GetAvailabilityResponses, GetData, GetResponses, GetOrderLicenseKeysData, GetOrderLicenseKeysResponses, GetLicenseKeysData, GetLicenseKeysResponses, GetLicenseKeysDownloadData, GetLicenseKeysDownloadResponses, GetOrdersExportData, GetOrdersExportResponses, GetSubscriptionsData, GetSubscriptionsResponses, GetContactByEmailAddressData, GetContactByEmailAddressResponses, GetAccountData, GetAccountResponses, GetProjectsUsageData, GetProjectsUsageResponses, GetSubscriptions1Data, GetSubscriptions1Responses, GetProjectsUsage1Data, GetProjectsUsage1Responses, GetProjectData, GetProjectResponses, GetProjectEmailAddressDomainsData, GetProjectEmailAddressDomainsResponses, GetProjectDataSourceData, GetProjectDataSourceResponses, GetProjectDataSourceTokenData, GetProjectDataSourceTokenResponses, GetPagesData, GetPagesResponses, DeleteData, DeleteResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postProvisioning = <ThrowOnError extends boolean = false>(options: Options<PostProvisioningData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProvisioningResponses, unknown, ThrowOnError>({
        url: '/trial/provisioning',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProvisioningOrder = <ThrowOnError extends boolean = false>(options: Options<PostProvisioningOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProvisioningOrderResponses, unknown, ThrowOnError>({
        url: '/trial/provisioning/{orderId}',
        ...options
    });
};

export const postNotifyEnd = <ThrowOnError extends boolean = false>(options: Options<PostNotifyEndData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNotifyEndResponses, unknown, ThrowOnError>({
        url: '/trial/notify-end/{orderId}',
        ...options
    });
};

export const postExpire = <ThrowOnError extends boolean = false>(options: Options<PostExpireData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostExpireResponses, unknown, ThrowOnError>({
        url: '/trial/expire/{orderId}',
        ...options
    });
};

export const postLicenseKeys = <ThrowOnError extends boolean = false>(options: Options<PostLicenseKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLicenseKeysResponses, unknown, ThrowOnError>({
        url: '/provisioning/license-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deactivateLicenseKeys = <ThrowOnError extends boolean = false>(options: Options<DeactivateLicenseKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeactivateLicenseKeysResponses, unknown, ThrowOnError>({
        url: '/provisioning/license-keys/{id}/deactivate',
        ...options
    });
};

export const postProductSubmit = <ThrowOnError extends boolean = false>(options: Options<PostProductSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProductSubmitResponses, unknown, ThrowOnError>({
        url: '/marketplace/product/submit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProductPurchase = <ThrowOnError extends boolean = false>(options: Options<PostProductPurchaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProductPurchaseResponses, unknown, ThrowOnError>({
        url: '/marketplace/product/purchase',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getProjectsKpi = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsKpiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectsKpiResponses, unknown, ThrowOnError>({
        url: '/marketplace/kpi',
        ...options
    });
};

export const postKpi = <ThrowOnError extends boolean = false>(options: Options<PostKpiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostKpiResponses, unknown, ThrowOnError>({
        url: '/marketplace/kpi',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProduct = <ThrowOnError extends boolean = false>(options: Options<PostProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProductResponses, unknown, ThrowOnError>({
        url: '/koroneiki/product/{productId}',
        ...options
    });
};

export const postProvisioning1 = <ThrowOnError extends boolean = false>(options: Options<PostProvisioning1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProvisioning1Responses, unknown, ThrowOnError>({
        url: '/dxp/provisioning/{orderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const uninstallApp = <ThrowOnError extends boolean = false>(options: Options<UninstallAppData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UninstallAppResponses, unknown, ThrowOnError>({
        url: '/console/uninstall-app/{orderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProvisioning2 = <ThrowOnError extends boolean = false>(options: Options<PostProvisioning2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProvisioning2Responses, unknown, ThrowOnError>({
        url: '/console/provisioning/{orderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postProvisioning3 = <ThrowOnError extends boolean = false>(options: Options<PostProvisioning3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProvisioning3Responses, unknown, ThrowOnError>({
        url: '/analytics/provisioning/{orderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAvailability = <ThrowOnError extends boolean = false>(options?: Options<GetAvailabilityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailabilityResponses, unknown, ThrowOnError>({
        url: '/trial/availability',
        ...options
    });
};

export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
        url: '/ready',
        ...options
    });
};

export const getOrderLicenseKeys = <ThrowOnError extends boolean = false>(options: Options<GetOrderLicenseKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderLicenseKeysResponses, unknown, ThrowOnError>({
        url: '/provisioning/order-license-keys/{orderId}',
        ...options
    });
};

export const getLicenseKeys = <ThrowOnError extends boolean = false>(options: Options<GetLicenseKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLicenseKeysResponses, unknown, ThrowOnError>({
        url: '/provisioning/license-keys/{id}',
        ...options
    });
};

export const getLicenseKeysDownload = <ThrowOnError extends boolean = false>(options: Options<GetLicenseKeysDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLicenseKeysDownloadResponses, unknown, ThrowOnError>({
        url: '/provisioning/license-keys/{id}/download',
        ...options
    });
};

export const getOrdersExport = <ThrowOnError extends boolean = false>(options?: Options<GetOrdersExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrdersExportResponses, unknown, ThrowOnError>({
        url: '/marketplace/orders/export',
        ...options
    });
};

export const getSubscriptions = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubscriptionsResponses, unknown, ThrowOnError>({
        url: '/koroneiki/subscriptions/{orderId}',
        ...options
    });
};

export const getContactByEmailAddress = <ThrowOnError extends boolean = false>(options: Options<GetContactByEmailAddressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContactByEmailAddressResponses, unknown, ThrowOnError>({
        url: '/koroneiki/contact/by-email-address/{emailAddress}',
        ...options
    });
};

export const getAccount = <ThrowOnError extends boolean = false>(options: Options<GetAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAccountResponses, unknown, ThrowOnError>({
        url: '/koroneiki/account/{accountId}',
        ...options
    });
};

export const getProjectsUsage = <ThrowOnError extends boolean = false>(options: Options<GetProjectsUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsUsageResponses, unknown, ThrowOnError>({
        url: '/dxp/project-usage',
        ...options
    });
};

export const getSubscriptions1 = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptions1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubscriptions1Responses, unknown, ThrowOnError>({
        url: '/console/subscriptions/{orderId}',
        ...options
    });
};

export const getProjectsUsage1 = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsUsage1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectsUsage1Responses, unknown, ThrowOnError>({
        url: '/console/projects-usage',
        ...options
    });
};

export const getProject = <ThrowOnError extends boolean = false>(options: Options<GetProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectResponses, unknown, ThrowOnError>({
        url: '/analytics/project/{projectId}',
        ...options
    });
};

export const getProjectEmailAddressDomains = <ThrowOnError extends boolean = false>(options: Options<GetProjectEmailAddressDomainsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectEmailAddressDomainsResponses, unknown, ThrowOnError>({
        url: '/analytics/project/{projectId}/email-address-domains',
        ...options
    });
};

export const getProjectDataSource = <ThrowOnError extends boolean = false>(options: Options<GetProjectDataSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectDataSourceResponses, unknown, ThrowOnError>({
        url: '/analytics/project/{projectId}/data-source',
        ...options
    });
};

export const getProjectDataSourceToken = <ThrowOnError extends boolean = false>(options: Options<GetProjectDataSourceTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectDataSourceTokenResponses, unknown, ThrowOnError>({
        url: '/analytics/project/{projectId}/data-source/token',
        ...options
    });
};

export const getPages = <ThrowOnError extends boolean = false>(options?: Options<GetPagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPagesResponses, unknown, ThrowOnError>({
        url: '/analytics/pages',
        ...options
    });
};

export const delete_ = <ThrowOnError extends boolean = false>(options: Options<DeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteResponses, unknown, ThrowOnError>({
        url: '/trial/{orderId}',
        ...options
    });
};
// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteV2GroupData, DeleteV2GroupResponses, GetV2GroupByIdData, GetV2GroupByIdResponses, PatchV2GroupData, PatchV2GroupResponses, PutV2GroupData, PutV2GroupResponses, GetV2GroupsData, GetV2GroupsResponses, PostV2GroupData, PostV2GroupResponses, PostV2GroupSearchData, PostV2GroupSearchResponses, GetV2ResourceTypeByIdData, GetV2ResourceTypeByIdResponses, GetV2ResourceTypesData, GetV2ResourceTypesResponses, GetV2SchemaByIdData, GetV2SchemaByIdResponses, GetV2SchemasData, GetV2SchemasResponses, GetV2ServiceProviderConfigData, GetV2ServiceProviderConfigResponses, DeleteV2UserData, DeleteV2UserResponses, GetV2UserByIdData, GetV2UserByIdResponses, PatchV2UserData, PatchV2UserResponses, PutV2UserData, PutV2UserResponses, GetV2UsersData, GetV2UsersResponses, PostV2UserData, PostV2UserResponses, PostV2UserSearchData, PostV2UserSearchResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Deletes a group.
 */
export const deleteV2Group = <ThrowOnError extends boolean = false>(options: Options<DeleteV2GroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV2GroupResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups/{id}',
        ...options
    });
};

/**
 * Retrieves a group.
 */
export const getV2GroupById = <ThrowOnError extends boolean = false>(options: Options<GetV2GroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2GroupByIdResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups/{id}',
        ...options
    });
};

/**
 * Updates a group.
 */
export const patchV2Group = <ThrowOnError extends boolean = false>(options: Options<PatchV2GroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchV2GroupResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options.headers
        }
    });
};

/**
 * Updates a group.
 */
export const putV2Group = <ThrowOnError extends boolean = false>(options: Options<PutV2GroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV2GroupResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options.headers
        }
    });
};

/**
 * Lists groups.
 */
export const getV2Groups = <ThrowOnError extends boolean = false>(options?: Options<GetV2GroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV2GroupsResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups',
        ...options
    });
};

/**
 * Creates a group.
 */
export const postV2Group = <ThrowOnError extends boolean = false>(options?: Options<PostV2GroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV2GroupResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options?.headers
        }
    });
};

/**
 * Query groups.
 */
export const postV2GroupSearch = <ThrowOnError extends boolean = false>(options?: Options<PostV2GroupSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV2GroupSearchResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Groups/.search',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options?.headers
        }
    });
};

export const getV2ResourceTypeById = <ThrowOnError extends boolean = false>(options: Options<GetV2ResourceTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2ResourceTypeByIdResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/ResourceTypes/{id}',
        ...options
    });
};

/**
 * To discover the types of resources available on a SCIM service provider.
 */
export const getV2ResourceTypes = <ThrowOnError extends boolean = false>(options?: Options<GetV2ResourceTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV2ResourceTypesResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/ResourceTypes',
        ...options
    });
};

export const getV2SchemaById = <ThrowOnError extends boolean = false>(options: Options<GetV2SchemaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2SchemaByIdResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Schemas/{id}',
        ...options
    });
};

/**
 * Lists schemas.
 */
export const getV2Schemas = <ThrowOnError extends boolean = false>(options?: Options<GetV2SchemasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV2SchemasResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Schemas',
        ...options
    });
};

/**
 * Gives serviceProviderConfig info.
 */
export const getV2ServiceProviderConfig = <ThrowOnError extends boolean = false>(options?: Options<GetV2ServiceProviderConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV2ServiceProviderConfigResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/ServiceProviderConfig',
        ...options
    });
};

/**
 * Deletes a user.
 */
export const deleteV2User = <ThrowOnError extends boolean = false>(options: Options<DeleteV2UserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV2UserResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users/{id}',
        ...options
    });
};

/**
 * Retrieves a user.
 */
export const getV2UserById = <ThrowOnError extends boolean = false>(options: Options<GetV2UserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2UserByIdResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users/{id}',
        ...options
    });
};

/**
 * Updates a user.
 */
export const patchV2User = <ThrowOnError extends boolean = false>(options: Options<PatchV2UserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchV2UserResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options.headers
        }
    });
};

/**
 * Updates a user.
 */
export const putV2User = <ThrowOnError extends boolean = false>(options: Options<PutV2UserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV2UserResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options.headers
        }
    });
};

/**
 * Lists users.
 */
export const getV2Users = <ThrowOnError extends boolean = false>(options?: Options<GetV2UsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV2UsersResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users',
        ...options
    });
};

/**
 * Creates a user.
 */
export const postV2User = <ThrowOnError extends boolean = false>(options?: Options<PostV2UserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV2UserResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options?.headers
        }
    });
};

/**
 * Query users.
 */
export const postV2UserSearch = <ThrowOnError extends boolean = false>(options?: Options<PostV2UserSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV2UserSearchResponses, unknown, ThrowOnError>({
        url: '/o/scim/v1.0/v2/Users/.search',
        ...options,
        headers: {
            'Content-Type': 'application/scim+json',
            ...options?.headers
        }
    });
};
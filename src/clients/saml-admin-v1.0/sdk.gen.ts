// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetSamlProviderData, GetSamlProviderResponses, PatchSamlProviderData, PatchSamlProviderResponses, PostSamlProviderData, PostSamlProviderResponses, PostSamlProviderBatchData, PostSamlProviderBatchResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieves the SAML Provider configuration.
 */
export const getSamlProvider = <ThrowOnError extends boolean = false>(options?: Options<GetSamlProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSamlProviderResponses, unknown, ThrowOnError>({
        url: '/o/saml-admin/v1.0/saml-provider',
        ...options
    });
};

/**
 * Patch the SAML Provider configuration.
 */
export const patchSamlProvider = <ThrowOnError extends boolean = false>(options?: Options<PatchSamlProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchSamlProviderResponses, unknown, ThrowOnError>({
        url: '/o/saml-admin/v1.0/saml-provider',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Creates a full SAML Provider configuration with peer connections.
 */
export const postSamlProvider = <ThrowOnError extends boolean = false>(options?: Options<PostSamlProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSamlProviderResponses, unknown, ThrowOnError>({
        url: '/o/saml-admin/v1.0/saml-provider',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postSamlProviderBatch = <ThrowOnError extends boolean = false>(options?: Options<PostSamlProviderBatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSamlProviderBatchResponses, unknown, ThrowOnError>({
        url: '/o/saml-admin/v1.0/saml-provider/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
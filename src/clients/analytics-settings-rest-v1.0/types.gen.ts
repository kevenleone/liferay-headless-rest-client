// This file is auto-generated by @hey-api/openapi-ts

export type Channel = {
    channelId?: string;
    commerceSyncEnabled?: boolean;
    createDate?: string;
    dataSources?: Array<DataSource>;
    name?: string;
    readonly 'x-class-name'?: string;
};

export type DataSource = {
    commerceChannelIds?: Array<number>;
    dataSourceId?: string;
    siteIds?: Array<number>;
    readonly 'x-class-name'?: string;
};

export type Facet = {
    facetCriteria?: string;
    facetValues?: Array<FacetValue>;
};

export type FacetValue = {
    numberOfOccurrences?: number;
    term?: string;
};

export type PageChannel = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<Channel>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type CommerceChannel = {
    channelName?: string;
    id?: number;
    name?: string;
    siteName?: string;
    readonly 'x-class-name'?: string;
};

export type PageCommerceChannel = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<CommerceChannel>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type ContactAccountGroup = {
    id?: number;
    name?: string;
    selected?: boolean;
    readonly 'x-class-name'?: string;
};

export type PageContactAccountGroup = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<ContactAccountGroup>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type ContactConfiguration = {
    syncAllAccounts?: boolean;
    syncAllContacts?: boolean;
    syncedAccountGroupIds?: Array<string>;
    syncedOrganizationIds?: Array<string>;
    syncedUserGroupIds?: Array<string>;
    readonly 'x-class-name'?: string;
};

export type ContactOrganization = {
    id?: number;
    name?: string;
    selected?: boolean;
    readonly 'x-class-name'?: string;
};

export type PageContactOrganization = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<ContactOrganization>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type ContactUserGroup = {
    id?: number;
    name?: string;
    selected?: boolean;
    readonly 'x-class-name'?: string;
};

export type PageContactUserGroup = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<ContactUserGroup>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type DataSourceLiferayAnalyticsUrl = {
    liferayAnalyticsURL?: string;
    readonly 'x-class-name'?: string;
};

export type DataSourceToken = {
    token?: string;
    readonly 'x-class-name'?: string;
};

export type Field = {
    example?: string;
    name?: string;
    required?: boolean;
    selected?: boolean;
    source?: string;
    type?: string;
    readonly 'x-class-name'?: string;
};

export type PageField = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<Field>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type FieldSummary = {
    account?: number;
    order?: number;
    people?: number;
    product?: number;
    readonly 'x-class-name'?: string;
};

export type RecommendationConfiguration = {
    contentRecommenderMostPopularItems?: RecommendationItem;
    contentRecommenderUserPersonalization?: RecommendationItem;
    readonly 'x-class-name'?: string;
};

export type RecommendationItem = {
    enabled?: boolean;
    readonly 'x-class-name'?: string;
    status?: 'Configuring' | 'Disabled' | 'Enabled' | 'Failed';
};

export type PageSite = {
    totalCount?: number;
    lastPage?: number;
    items?: Array<Site>;
    actions?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    pageSize?: number;
    facets?: Array<Facet>;
    page?: number;
};

export type Site = {
    channelName?: string;
    friendlyURL?: string;
    id?: number;
    name?: string;
    readonly 'x-class-name'?: string;
};

export type PostConfigurationWizardModeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/configuration/wizard-mode';
};

export type PostConfigurationWizardModeResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetChannelsPageData = {
    body?: never;
    path?: never;
    query?: {
        keywords?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/channels';
};

export type GetChannelsPageResponses = {
    /**
     * default response
     */
    default: PageChannel;
};

export type GetChannelsPageResponse = GetChannelsPageResponses[keyof GetChannelsPageResponses];

export type PatchChannelData = {
    body?: Channel;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/channels';
};

export type PatchChannelResponses = {
    /**
     * default response
     */
    default: Channel;
};

export type PatchChannelResponse = PatchChannelResponses[keyof PatchChannelResponses];

export type PostChannelData = {
    body?: Channel;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/channels';
};

export type PostChannelResponses = {
    /**
     * default response
     */
    default: Channel;
};

export type PostChannelResponse = PostChannelResponses[keyof PostChannelResponses];

export type GetCommerceChannelsPageData = {
    body?: never;
    path?: never;
    query?: {
        keywords?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/commerce-channels';
};

export type GetCommerceChannelsPageResponses = {
    /**
     * default response
     */
    default: PageCommerceChannel;
};

export type GetCommerceChannelsPageResponse = GetCommerceChannelsPageResponses[keyof GetCommerceChannelsPageResponses];

export type GetContactAccountGroupsPageData = {
    body?: never;
    path?: never;
    query?: {
        keywords?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/contacts/account-groups';
};

export type GetContactAccountGroupsPageResponses = {
    /**
     * default response
     */
    default: PageContactAccountGroup;
};

export type GetContactAccountGroupsPageResponse = GetContactAccountGroupsPageResponses[keyof GetContactAccountGroupsPageResponses];

export type GetContactConfigurationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/contacts/configuration';
};

export type GetContactConfigurationResponses = {
    /**
     * default response
     */
    default: ContactConfiguration;
};

export type GetContactConfigurationResponse = GetContactConfigurationResponses[keyof GetContactConfigurationResponses];

export type PutContactConfigurationData = {
    body?: ContactConfiguration;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/contacts/configuration';
};

export type PutContactConfigurationResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetContactOrganizationsPageData = {
    body?: never;
    path?: never;
    query?: {
        keywords?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/contacts/organizations';
};

export type GetContactOrganizationsPageResponses = {
    /**
     * default response
     */
    default: PageContactOrganization;
};

export type GetContactOrganizationsPageResponse = GetContactOrganizationsPageResponses[keyof GetContactOrganizationsPageResponses];

export type GetContactUserGroupsPageData = {
    body?: never;
    path?: never;
    query?: {
        keywords?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/contacts/user-groups';
};

export type GetContactUserGroupsPageResponses = {
    /**
     * default response
     */
    default: PageContactUserGroup;
};

export type GetContactUserGroupsPageResponse = GetContactUserGroupsPageResponses[keyof GetContactUserGroupsPageResponses];

export type DeleteDataSourceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/data-sources';
};

export type DeleteDataSourceResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type PostDataSourceData = {
    body?: DataSourceToken;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/data-sources';
};

export type PostDataSourceResponses = {
    /**
     * default response
     */
    default: DataSourceLiferayAnalyticsUrl;
};

export type PostDataSourceResponse = PostDataSourceResponses[keyof PostDataSourceResponses];

export type GetFieldsAccountsPageData = {
    body?: never;
    path?: never;
    query?: {
        keyword?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/fields/accounts';
};

export type GetFieldsAccountsPageResponses = {
    /**
     * default response
     */
    default: PageField;
};

export type GetFieldsAccountsPageResponse = GetFieldsAccountsPageResponses[keyof GetFieldsAccountsPageResponses];

export type PatchFieldAccountData = {
    body?: Array<Field>;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/fields/accounts';
};

export type PatchFieldAccountResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetFieldsOrdersPageData = {
    body?: never;
    path?: never;
    query?: {
        keyword?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/fields/orders';
};

export type GetFieldsOrdersPageResponses = {
    /**
     * default response
     */
    default: PageField;
};

export type GetFieldsOrdersPageResponse = GetFieldsOrdersPageResponses[keyof GetFieldsOrdersPageResponses];

export type PatchFieldOrderData = {
    body?: Array<Field>;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/fields/orders';
};

export type PatchFieldOrderResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetFieldsPeoplePageData = {
    body?: never;
    path?: never;
    query?: {
        keyword?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/fields/people';
};

export type GetFieldsPeoplePageResponses = {
    /**
     * default response
     */
    default: PageField;
};

export type GetFieldsPeoplePageResponse = GetFieldsPeoplePageResponses[keyof GetFieldsPeoplePageResponses];

export type PatchFieldPeopleData = {
    body?: Array<Field>;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/fields/people';
};

export type PatchFieldPeopleResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetFieldsProductsPageData = {
    body?: never;
    path?: never;
    query?: {
        keyword?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/fields/products';
};

export type GetFieldsProductsPageResponses = {
    /**
     * default response
     */
    default: PageField;
};

export type GetFieldsProductsPageResponse = GetFieldsProductsPageResponses[keyof GetFieldsProductsPageResponses];

export type PatchFieldProductData = {
    body?: Array<Field>;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/fields/products';
};

export type PatchFieldProductResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetFieldData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/fields';
};

export type GetFieldResponses = {
    /**
     * default response
     */
    default: FieldSummary;
};

export type GetFieldResponse = GetFieldResponses[keyof GetFieldResponses];

export type GetRecommendationConfigurationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/recommendation/configuration';
};

export type GetRecommendationConfigurationResponses = {
    /**
     * default response
     */
    default: RecommendationConfiguration;
};

export type GetRecommendationConfigurationResponse = GetRecommendationConfigurationResponses[keyof GetRecommendationConfigurationResponses];

export type PutRecommendationConfigurationData = {
    body?: RecommendationConfiguration;
    path?: never;
    query?: never;
    url: '/o/analytics-settings-rest/v1.0/recommendation/configuration';
};

export type PutRecommendationConfigurationResponses = {
    /**
     * default response
     */
    default: unknown;
};

export type GetSitesPageData = {
    body?: never;
    path?: never;
    query?: {
        keywords?: string;
        page?: string;
        pageSize?: string;
        sort?: string;
        nestedFields?: string;
    };
    url: '/o/analytics-settings-rest/v1.0/sites';
};

export type GetSitesPageResponses = {
    /**
     * default response
     */
    default: PageSite;
};

export type GetSitesPageResponse = GetSitesPageResponses[keyof GetSitesPageResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};